import type { PartialMessage } from '@bufbuild/protobuf';
import type TypedEmitter from 'typed-emitter';
import { FfiHandle, livekitDispose } from './napi/native.js';
import { FfiEvent, FfiRequest, FfiResponse } from './proto/ffi_pb.js';
export { FfiHandle, FfiEvent, FfiResponse, FfiRequest, livekitDispose as dispose };
export type FfiClientCallbacks = {
    ffi_event: (event: FfiEvent) => void;
};
export declare enum FfiClientEvent {
    FfiEvent = "ffi_event"
}
declare const FfiClient_base: new () => TypedEmitter<FfiClientCallbacks>;
export declare class FfiClient extends FfiClient_base {
    static _client?: FfiClient;
    /** @internal */
    static get instance(): FfiClient;
    constructor();
    request<T>(req: PartialMessage<FfiRequest>): T;
    copyBuffer(ptr: bigint, len: number): Uint8Array;
    retrievePtr(data: Uint8Array): bigint;
    waitFor<T>(predicate: (ev: FfiEvent) => boolean): Promise<T>;
}
//# sourceMappingURL=ffi_client.d.ts.map