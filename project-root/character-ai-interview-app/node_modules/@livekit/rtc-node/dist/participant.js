// SPDX-FileCopyrightText: 2024 LiveKit, Inc.
//
// SPDX-License-Identifier: Apache-2.0
import { FfiClient, FfiHandle } from './ffi_client.js';
import { PublishDataRequest, PublishSipDtmfRequest, PublishTrackRequest, SetLocalAttributesRequest, SetLocalMetadataRequest, SetLocalNameRequest, UnpublishTrackRequest, } from './proto/room_pb.js';
import { LocalTrackPublication } from './track_publication.js';
export class Participant {
    constructor(owned_info) {
        this.trackPublications = new Map();
        this.info = owned_info.info;
        this.ffi_handle = new FfiHandle(owned_info.handle.id);
    }
    get sid() {
        return this.info.sid;
    }
    get name() {
        return this.info.name;
    }
    get identity() {
        return this.info.identity;
    }
    get metadata() {
        return this.info.metadata;
    }
    get attributes() {
        return this.info.attributes;
    }
}
export class LocalParticipant extends Participant {
    constructor() {
        super(...arguments);
        this.trackPublications = new Map();
    }
    async publishData(data, options) {
        const req = new PublishDataRequest({
            localParticipantHandle: this.ffi_handle.handle,
            dataPtr: FfiClient.instance.retrievePtr(data),
            dataLen: BigInt(data.byteLength),
            reliable: options.reliable,
            topic: options.topic,
            destinationIdentities: options.destination_identities,
        });
        const res = FfiClient.instance.request({
            message: { case: 'publishData', value: req },
        });
        const cb = await FfiClient.instance.waitFor((ev) => {
            return ev.message.case == 'publishData' && ev.message.value.asyncId == res.asyncId;
        });
        if (cb.error) {
            throw new Error(cb.error);
        }
    }
    async publishDtmf(code, digit) {
        const req = new PublishSipDtmfRequest({
            localParticipantHandle: this.ffi_handle.handle,
            code,
            digit,
        });
        const res = FfiClient.instance.request({
            message: { case: 'publishSipDtmf', value: req },
        });
        const cb = await FfiClient.instance.waitFor((ev) => {
            return ev.message.case == 'publishSipDtmf' && ev.message.value.asyncId == res.asyncId;
        });
        if (cb.error) {
            throw new Error(cb.error);
        }
    }
    async updateMetadata(metadata) {
        const req = new SetLocalMetadataRequest({
            localParticipantHandle: this.ffi_handle.handle,
            metadata: metadata,
        });
        const res = FfiClient.instance.request({
            message: { case: 'setLocalMetadata', value: req },
        });
        await FfiClient.instance.waitFor((ev) => {
            return ev.message.case == 'setLocalMetadata' && ev.message.value.asyncId == res.asyncId;
        });
    }
    async updateName(name) {
        const req = new SetLocalNameRequest({
            localParticipantHandle: this.ffi_handle.handle,
            name: name,
        });
        const res = FfiClient.instance.request({
            message: { case: 'setLocalName', value: req },
        });
        await FfiClient.instance.waitFor((ev) => {
            return ev.message.case == 'setLocalName' && ev.message.value.asyncId == res.asyncId;
        });
    }
    async setAttributes(attributes) {
        const req = new SetLocalAttributesRequest({
            localParticipantHandle: this.ffi_handle.handle,
            attributes: attributes,
        });
        const res = FfiClient.instance.request({
            message: { case: 'setLocalAttributes', value: req },
        });
        await FfiClient.instance.waitFor((ev) => {
            return ev.message.case == 'setLocalAttributes' && ev.message.value.asyncId == res.asyncId;
        });
    }
    async publishTrack(track, options) {
        const req = new PublishTrackRequest({
            localParticipantHandle: this.ffi_handle.handle,
            trackHandle: track.ffi_handle.handle,
            options: options,
        });
        const res = FfiClient.instance.request({
            message: { case: 'publishTrack', value: req },
        });
        const cb = await FfiClient.instance.waitFor((ev) => {
            return ev.message.case == 'publishTrack' && ev.message.value.asyncId == res.asyncId;
        });
        if (cb.error) {
            throw new Error(cb.error);
        }
        const track_publication = new LocalTrackPublication(cb.publication);
        track_publication.track = track;
        this.trackPublications.set(track_publication.sid, track_publication);
        return track_publication;
    }
    async unpublishTrack(trackSid) {
        const req = new UnpublishTrackRequest({
            localParticipantHandle: this.ffi_handle.handle,
            trackSid: trackSid,
        });
        const res = FfiClient.instance.request({
            message: { case: 'unpublishTrack', value: req },
        });
        const cb = await FfiClient.instance.waitFor((ev) => {
            return ev.message.case == 'unpublishTrack' && ev.message.value.asyncId == res.asyncId;
        });
        if (cb.error) {
            throw new Error(cb.error);
        }
        const pub = this.trackPublications.get(trackSid);
        pub.track = undefined;
        this.trackPublications.delete(trackSid);
    }
}
export class RemoteParticipant extends Participant {
    constructor(owned_info) {
        super(owned_info);
        this.trackPublications = new Map();
    }
}
//# sourceMappingURL=participant.js.map