import { FfiHandle } from './ffi_client.js';
import type { OwnedParticipant, ParticipantInfo } from './proto/participant_pb.js';
import type { TrackPublishOptions } from './proto/room_pb.js';
import type { LocalTrack } from './track.js';
import type { RemoteTrackPublication, TrackPublication } from './track_publication.js';
import { LocalTrackPublication } from './track_publication.js';
export declare abstract class Participant {
    /** @internal */
    info: ParticipantInfo;
    /** @internal */
    ffi_handle: FfiHandle;
    trackPublications: Map<string, TrackPublication>;
    constructor(owned_info: OwnedParticipant);
    get sid(): string;
    get name(): string;
    get identity(): string;
    get metadata(): string;
    get attributes(): Record<string, string>;
}
export type DataPublishOptions = {
    /**
     * whether to send this as reliable or lossy.
     * For data that you need delivery guarantee (such as chat messages), use Reliable.
     * For data that should arrive as quickly as possible, but you are ok with dropped
     * packets, use Lossy.
     */
    reliable?: boolean;
    /**
     * the identities of participants who will receive the message, will be sent to every one if empty
     */
    destination_identities?: string[];
    /** the topic under which the message gets published */
    topic?: string;
};
export declare class LocalParticipant extends Participant {
    trackPublications: Map<string, LocalTrackPublication>;
    publishData(data: Uint8Array, options: DataPublishOptions): Promise<void>;
    publishDtmf(code: number, digit: string): Promise<void>;
    updateMetadata(metadata: string): Promise<void>;
    updateName(name: string): Promise<void>;
    setAttributes(attributes: Record<string, string>): Promise<void>;
    publishTrack(track: LocalTrack, options: TrackPublishOptions): Promise<LocalTrackPublication>;
    unpublishTrack(trackSid: string): Promise<void>;
}
export declare class RemoteParticipant extends Participant {
    trackPublications: Map<string, RemoteTrackPublication>;
    constructor(owned_info: OwnedParticipant);
}
//# sourceMappingURL=participant.d.ts.map