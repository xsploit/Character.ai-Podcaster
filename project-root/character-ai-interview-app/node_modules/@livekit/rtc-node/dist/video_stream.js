// SPDX-FileCopyrightText: 2024 LiveKit, Inc.
//
// SPDX-License-Identifier: Apache-2.0
import EventEmitter from 'events';
import { FfiClient, FfiClientEvent, FfiHandle } from './ffi_client.js';
import { NewVideoStreamRequest, VideoStreamType } from './proto/video_frame_pb.js';
import { VideoFrame } from './video_frame.js';
export var VideoStreamEvent;
(function (VideoStreamEvent) {
    VideoStreamEvent["FrameReceived"] = "frameReceived";
})(VideoStreamEvent || (VideoStreamEvent = {}));
export class VideoStream extends EventEmitter {
    constructor(track) {
        super();
        this.onEvent = (ev) => {
            if (ev.message.case != 'videoStreamEvent' ||
                ev.message.value.streamHandle != this.ffiHandle.handle) {
                return;
            }
            const streamEvent = ev.message.value.message;
            switch (streamEvent.case) {
                case 'frameReceived':
                    const rotation = streamEvent.value.rotation;
                    const timestampUs = streamEvent.value.timestampUs;
                    const frame = VideoFrame.fromOwnedInfo(streamEvent.value.buffer);
                    this.emit(VideoStreamEvent.FrameReceived, { frame, timestampUs, rotation });
                    break;
                case 'eos':
                    FfiClient.instance.off(FfiClientEvent.FfiEvent, this.onEvent);
                    break;
            }
        };
        this.track = track;
        const req = new NewVideoStreamRequest({
            type: VideoStreamType.VIDEO_STREAM_NATIVE,
            trackHandle: track.ffi_handle.handle,
        });
        const res = FfiClient.instance.request({
            message: {
                case: 'newVideoStream',
                value: req,
            },
        });
        this.info = res.stream.info;
        this.ffiHandle = new FfiHandle(res.stream.handle.id);
        FfiClient.instance.on(FfiClientEvent.FfiEvent, this.onEvent);
    }
    close() {
        this.ffiHandle.dispose();
    }
}
//# sourceMappingURL=video_stream.js.map