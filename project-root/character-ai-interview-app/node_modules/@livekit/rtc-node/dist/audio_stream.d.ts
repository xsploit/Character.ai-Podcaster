import type TypedEmitter from 'typed-emitter';
import { AudioFrame } from './audio_frame.js';
import { FfiHandle } from './ffi_client.js';
import type { AudioStreamInfo } from './proto/audio_frame_pb.js';
import type { Track } from './track.js';
export type AudioFrameEvent = {
    frame: AudioFrame;
};
export type AudioStreamCallbacks = {
    frameReceived: (frame: AudioFrameEvent) => void;
};
export declare enum AudioStreamEvent {
    FrameReceived = "frameReceived"
}
declare const AudioStream_base: new () => TypedEmitter<AudioStreamCallbacks>;
export declare class AudioStream extends AudioStream_base {
    /** @internal */
    info: AudioStreamInfo;
    /** @internal */
    ffiHandle: FfiHandle;
    track: Track;
    constructor(track: Track);
    private onEvent;
    close(): void;
}
export {};
//# sourceMappingURL=audio_stream.d.ts.map