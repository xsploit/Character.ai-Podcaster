import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ConnectCallback, ConnectRequest, ConnectResponse, DisconnectCallback, DisconnectRequest, DisconnectResponse, GetSessionStatsCallback, GetSessionStatsRequest, GetSessionStatsResponse, PublishDataCallback, PublishDataRequest, PublishDataResponse, PublishSipDtmfCallback, PublishSipDtmfRequest, PublishSipDtmfResponse, PublishTrackCallback, PublishTrackRequest, PublishTrackResponse, PublishTranscriptionCallback, PublishTranscriptionRequest, PublishTranscriptionResponse, RoomEvent, SetLocalAttributesCallback, SetLocalAttributesRequest, SetLocalAttributesResponse, SetLocalMetadataCallback, SetLocalMetadataRequest, SetLocalMetadataResponse, SetLocalNameCallback, SetLocalNameRequest, SetLocalNameResponse, SetSubscribedRequest, SetSubscribedResponse, UnpublishTrackCallback, UnpublishTrackRequest, UnpublishTrackResponse } from "./room_pb.js";
import { CreateAudioTrackRequest, CreateAudioTrackResponse, CreateVideoTrackRequest, CreateVideoTrackResponse, GetStatsCallback, GetStatsRequest, GetStatsResponse, TrackEvent } from "./track_pb.js";
import { CaptureVideoFrameRequest, CaptureVideoFrameResponse, NewVideoSourceRequest, NewVideoSourceResponse, NewVideoStreamRequest, NewVideoStreamResponse, VideoConvertRequest, VideoConvertResponse, VideoStreamEvent } from "./video_frame_pb.js";
import { AudioStreamEvent, CaptureAudioFrameCallback, CaptureAudioFrameRequest, CaptureAudioFrameResponse, NewAudioResamplerRequest, NewAudioResamplerResponse, NewAudioSourceRequest, NewAudioSourceResponse, NewAudioStreamRequest, NewAudioStreamResponse, RemixAndResampleRequest, RemixAndResampleResponse } from "./audio_frame_pb.js";
import { E2eeRequest, E2eeResponse } from "./e2ee_pb.js";
/**
 * @generated from enum livekit.proto.LogLevel
 */
export declare enum LogLevel {
    /**
     * @generated from enum value: LOG_ERROR = 0;
     */
    LOG_ERROR = 0,
    /**
     * @generated from enum value: LOG_WARN = 1;
     */
    LOG_WARN = 1,
    /**
     * @generated from enum value: LOG_INFO = 2;
     */
    LOG_INFO = 2,
    /**
     * @generated from enum value: LOG_DEBUG = 3;
     */
    LOG_DEBUG = 3,
    /**
     * @generated from enum value: LOG_TRACE = 4;
     */
    LOG_TRACE = 4
}
/**
 * This is the input of livekit_ffi_request function
 * We always expect a response (FFIResponse, even if it's empty)
 *
 * @generated from message livekit.proto.FfiRequest
 */
export declare class FfiRequest extends Message<FfiRequest> {
    /**
     * @generated from oneof livekit.proto.FfiRequest.message
     */
    message: {
        /**
         * @generated from field: livekit.proto.DisposeRequest dispose = 2;
         */
        value: DisposeRequest;
        case: "dispose";
    } | {
        /**
         * Room
         *
         * @generated from field: livekit.proto.ConnectRequest connect = 3;
         */
        value: ConnectRequest;
        case: "connect";
    } | {
        /**
         * @generated from field: livekit.proto.DisconnectRequest disconnect = 4;
         */
        value: DisconnectRequest;
        case: "disconnect";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTrackRequest publish_track = 5;
         */
        value: PublishTrackRequest;
        case: "publishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.UnpublishTrackRequest unpublish_track = 6;
         */
        value: UnpublishTrackRequest;
        case: "unpublishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.PublishDataRequest publish_data = 7;
         */
        value: PublishDataRequest;
        case: "publishData";
    } | {
        /**
         * @generated from field: livekit.proto.SetSubscribedRequest set_subscribed = 8;
         */
        value: SetSubscribedRequest;
        case: "setSubscribed";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalMetadataRequest set_local_metadata = 9;
         */
        value: SetLocalMetadataRequest;
        case: "setLocalMetadata";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalNameRequest set_local_name = 10;
         */
        value: SetLocalNameRequest;
        case: "setLocalName";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalAttributesRequest set_local_attributes = 11;
         */
        value: SetLocalAttributesRequest;
        case: "setLocalAttributes";
    } | {
        /**
         * @generated from field: livekit.proto.GetSessionStatsRequest get_session_stats = 12;
         */
        value: GetSessionStatsRequest;
        case: "getSessionStats";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTranscriptionRequest publish_transcription = 13;
         */
        value: PublishTranscriptionRequest;
        case: "publishTranscription";
    } | {
        /**
         * @generated from field: livekit.proto.PublishSipDtmfRequest publish_sip_dtmf = 14;
         */
        value: PublishSipDtmfRequest;
        case: "publishSipDtmf";
    } | {
        /**
         * Track
         *
         * @generated from field: livekit.proto.CreateVideoTrackRequest create_video_track = 15;
         */
        value: CreateVideoTrackRequest;
        case: "createVideoTrack";
    } | {
        /**
         * @generated from field: livekit.proto.CreateAudioTrackRequest create_audio_track = 16;
         */
        value: CreateAudioTrackRequest;
        case: "createAudioTrack";
    } | {
        /**
         * @generated from field: livekit.proto.GetStatsRequest get_stats = 17;
         */
        value: GetStatsRequest;
        case: "getStats";
    } | {
        /**
         * Video
         *
         * @generated from field: livekit.proto.NewVideoStreamRequest new_video_stream = 18;
         */
        value: NewVideoStreamRequest;
        case: "newVideoStream";
    } | {
        /**
         * @generated from field: livekit.proto.NewVideoSourceRequest new_video_source = 19;
         */
        value: NewVideoSourceRequest;
        case: "newVideoSource";
    } | {
        /**
         * @generated from field: livekit.proto.CaptureVideoFrameRequest capture_video_frame = 20;
         */
        value: CaptureVideoFrameRequest;
        case: "captureVideoFrame";
    } | {
        /**
         * @generated from field: livekit.proto.VideoConvertRequest video_convert = 21;
         */
        value: VideoConvertRequest;
        case: "videoConvert";
    } | {
        /**
         * Audio
         *
         * @generated from field: livekit.proto.NewAudioStreamRequest new_audio_stream = 23;
         */
        value: NewAudioStreamRequest;
        case: "newAudioStream";
    } | {
        /**
         * @generated from field: livekit.proto.NewAudioSourceRequest new_audio_source = 24;
         */
        value: NewAudioSourceRequest;
        case: "newAudioSource";
    } | {
        /**
         * @generated from field: livekit.proto.CaptureAudioFrameRequest capture_audio_frame = 25;
         */
        value: CaptureAudioFrameRequest;
        case: "captureAudioFrame";
    } | {
        /**
         * @generated from field: livekit.proto.NewAudioResamplerRequest new_audio_resampler = 26;
         */
        value: NewAudioResamplerRequest;
        case: "newAudioResampler";
    } | {
        /**
         * @generated from field: livekit.proto.RemixAndResampleRequest remix_and_resample = 27;
         */
        value: RemixAndResampleRequest;
        case: "remixAndResample";
    } | {
        /**
         * @generated from field: livekit.proto.E2eeRequest e2ee = 28;
         */
        value: E2eeRequest;
        case: "e2ee";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<FfiRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "livekit.proto.FfiRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FfiRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FfiRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FfiRequest;
    static equals(a: FfiRequest | PlainMessage<FfiRequest> | undefined, b: FfiRequest | PlainMessage<FfiRequest> | undefined): boolean;
}
/**
 * This is the output of livekit_ffi_request function.
 *
 * @generated from message livekit.proto.FfiResponse
 */
export declare class FfiResponse extends Message<FfiResponse> {
    /**
     * @generated from oneof livekit.proto.FfiResponse.message
     */
    message: {
        /**
         * @generated from field: livekit.proto.DisposeResponse dispose = 2;
         */
        value: DisposeResponse;
        case: "dispose";
    } | {
        /**
         * Room
         *
         * @generated from field: livekit.proto.ConnectResponse connect = 3;
         */
        value: ConnectResponse;
        case: "connect";
    } | {
        /**
         * @generated from field: livekit.proto.DisconnectResponse disconnect = 4;
         */
        value: DisconnectResponse;
        case: "disconnect";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTrackResponse publish_track = 5;
         */
        value: PublishTrackResponse;
        case: "publishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.UnpublishTrackResponse unpublish_track = 6;
         */
        value: UnpublishTrackResponse;
        case: "unpublishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.PublishDataResponse publish_data = 7;
         */
        value: PublishDataResponse;
        case: "publishData";
    } | {
        /**
         * @generated from field: livekit.proto.SetSubscribedResponse set_subscribed = 8;
         */
        value: SetSubscribedResponse;
        case: "setSubscribed";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalMetadataResponse set_local_metadata = 9;
         */
        value: SetLocalMetadataResponse;
        case: "setLocalMetadata";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalNameResponse set_local_name = 10;
         */
        value: SetLocalNameResponse;
        case: "setLocalName";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalAttributesResponse set_local_attributes = 11;
         */
        value: SetLocalAttributesResponse;
        case: "setLocalAttributes";
    } | {
        /**
         * @generated from field: livekit.proto.GetSessionStatsResponse get_session_stats = 12;
         */
        value: GetSessionStatsResponse;
        case: "getSessionStats";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTranscriptionResponse publish_transcription = 13;
         */
        value: PublishTranscriptionResponse;
        case: "publishTranscription";
    } | {
        /**
         * @generated from field: livekit.proto.PublishSipDtmfResponse publish_sip_dtmf = 14;
         */
        value: PublishSipDtmfResponse;
        case: "publishSipDtmf";
    } | {
        /**
         * Track
         *
         * @generated from field: livekit.proto.CreateVideoTrackResponse create_video_track = 15;
         */
        value: CreateVideoTrackResponse;
        case: "createVideoTrack";
    } | {
        /**
         * @generated from field: livekit.proto.CreateAudioTrackResponse create_audio_track = 16;
         */
        value: CreateAudioTrackResponse;
        case: "createAudioTrack";
    } | {
        /**
         * @generated from field: livekit.proto.GetStatsResponse get_stats = 17;
         */
        value: GetStatsResponse;
        case: "getStats";
    } | {
        /**
         * Video
         *
         * @generated from field: livekit.proto.NewVideoStreamResponse new_video_stream = 18;
         */
        value: NewVideoStreamResponse;
        case: "newVideoStream";
    } | {
        /**
         * @generated from field: livekit.proto.NewVideoSourceResponse new_video_source = 19;
         */
        value: NewVideoSourceResponse;
        case: "newVideoSource";
    } | {
        /**
         * @generated from field: livekit.proto.CaptureVideoFrameResponse capture_video_frame = 20;
         */
        value: CaptureVideoFrameResponse;
        case: "captureVideoFrame";
    } | {
        /**
         * @generated from field: livekit.proto.VideoConvertResponse video_convert = 21;
         */
        value: VideoConvertResponse;
        case: "videoConvert";
    } | {
        /**
         * Audio
         *
         * @generated from field: livekit.proto.NewAudioStreamResponse new_audio_stream = 22;
         */
        value: NewAudioStreamResponse;
        case: "newAudioStream";
    } | {
        /**
         * @generated from field: livekit.proto.NewAudioSourceResponse new_audio_source = 23;
         */
        value: NewAudioSourceResponse;
        case: "newAudioSource";
    } | {
        /**
         * @generated from field: livekit.proto.CaptureAudioFrameResponse capture_audio_frame = 24;
         */
        value: CaptureAudioFrameResponse;
        case: "captureAudioFrame";
    } | {
        /**
         * @generated from field: livekit.proto.NewAudioResamplerResponse new_audio_resampler = 25;
         */
        value: NewAudioResamplerResponse;
        case: "newAudioResampler";
    } | {
        /**
         * @generated from field: livekit.proto.RemixAndResampleResponse remix_and_resample = 26;
         */
        value: RemixAndResampleResponse;
        case: "remixAndResample";
    } | {
        /**
         * @generated from field: livekit.proto.E2eeResponse e2ee = 27;
         */
        value: E2eeResponse;
        case: "e2ee";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<FfiResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "livekit.proto.FfiResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FfiResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FfiResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FfiResponse;
    static equals(a: FfiResponse | PlainMessage<FfiResponse> | undefined, b: FfiResponse | PlainMessage<FfiResponse> | undefined): boolean;
}
/**
 * To minimize complexity, participant events are not included in the protocol.
 * It is easily deducible from the room events and it turned out that is is easier to implement
 * on the ffi client side.
 *
 * @generated from message livekit.proto.FfiEvent
 */
export declare class FfiEvent extends Message<FfiEvent> {
    /**
     * @generated from oneof livekit.proto.FfiEvent.message
     */
    message: {
        /**
         * @generated from field: livekit.proto.RoomEvent room_event = 1;
         */
        value: RoomEvent;
        case: "roomEvent";
    } | {
        /**
         * @generated from field: livekit.proto.TrackEvent track_event = 2;
         */
        value: TrackEvent;
        case: "trackEvent";
    } | {
        /**
         * @generated from field: livekit.proto.VideoStreamEvent video_stream_event = 3;
         */
        value: VideoStreamEvent;
        case: "videoStreamEvent";
    } | {
        /**
         * @generated from field: livekit.proto.AudioStreamEvent audio_stream_event = 4;
         */
        value: AudioStreamEvent;
        case: "audioStreamEvent";
    } | {
        /**
         * @generated from field: livekit.proto.ConnectCallback connect = 5;
         */
        value: ConnectCallback;
        case: "connect";
    } | {
        /**
         * @generated from field: livekit.proto.DisconnectCallback disconnect = 7;
         */
        value: DisconnectCallback;
        case: "disconnect";
    } | {
        /**
         * @generated from field: livekit.proto.DisposeCallback dispose = 8;
         */
        value: DisposeCallback;
        case: "dispose";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTrackCallback publish_track = 9;
         */
        value: PublishTrackCallback;
        case: "publishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.UnpublishTrackCallback unpublish_track = 10;
         */
        value: UnpublishTrackCallback;
        case: "unpublishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.PublishDataCallback publish_data = 11;
         */
        value: PublishDataCallback;
        case: "publishData";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTranscriptionCallback publish_transcription = 12;
         */
        value: PublishTranscriptionCallback;
        case: "publishTranscription";
    } | {
        /**
         * @generated from field: livekit.proto.CaptureAudioFrameCallback capture_audio_frame = 13;
         */
        value: CaptureAudioFrameCallback;
        case: "captureAudioFrame";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalMetadataCallback set_local_metadata = 14;
         */
        value: SetLocalMetadataCallback;
        case: "setLocalMetadata";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalNameCallback set_local_name = 15;
         */
        value: SetLocalNameCallback;
        case: "setLocalName";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalAttributesCallback set_local_attributes = 16;
         */
        value: SetLocalAttributesCallback;
        case: "setLocalAttributes";
    } | {
        /**
         * @generated from field: livekit.proto.GetStatsCallback get_stats = 17;
         */
        value: GetStatsCallback;
        case: "getStats";
    } | {
        /**
         * @generated from field: livekit.proto.LogBatch logs = 18;
         */
        value: LogBatch;
        case: "logs";
    } | {
        /**
         * @generated from field: livekit.proto.GetSessionStatsCallback get_session_stats = 19;
         */
        value: GetSessionStatsCallback;
        case: "getSessionStats";
    } | {
        /**
         * @generated from field: livekit.proto.Panic panic = 20;
         */
        value: Panic;
        case: "panic";
    } | {
        /**
         * @generated from field: livekit.proto.PublishSipDtmfCallback publish_sip_dtmf = 21;
         */
        value: PublishSipDtmfCallback;
        case: "publishSipDtmf";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<FfiEvent>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "livekit.proto.FfiEvent";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FfiEvent;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FfiEvent;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FfiEvent;
    static equals(a: FfiEvent | PlainMessage<FfiEvent> | undefined, b: FfiEvent | PlainMessage<FfiEvent> | undefined): boolean;
}
/**
 * Stop all rooms synchronously (Do we need async here?).
 * e.g: This is used for the Unity Editor after each assemblies reload.
 * TODO(theomonnom): Implement a debug mode where we can find all leaked handles?
 *
 * @generated from message livekit.proto.DisposeRequest
 */
export declare class DisposeRequest extends Message<DisposeRequest> {
    /**
     * @generated from field: bool async = 1;
     */
    async: boolean;
    constructor(data?: PartialMessage<DisposeRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "livekit.proto.DisposeRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisposeRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisposeRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisposeRequest;
    static equals(a: DisposeRequest | PlainMessage<DisposeRequest> | undefined, b: DisposeRequest | PlainMessage<DisposeRequest> | undefined): boolean;
}
/**
 * @generated from message livekit.proto.DisposeResponse
 */
export declare class DisposeResponse extends Message<DisposeResponse> {
    /**
     * None if sync
     *
     * @generated from field: optional uint64 async_id = 1;
     */
    asyncId?: bigint;
    constructor(data?: PartialMessage<DisposeResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "livekit.proto.DisposeResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisposeResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisposeResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisposeResponse;
    static equals(a: DisposeResponse | PlainMessage<DisposeResponse> | undefined, b: DisposeResponse | PlainMessage<DisposeResponse> | undefined): boolean;
}
/**
 * @generated from message livekit.proto.DisposeCallback
 */
export declare class DisposeCallback extends Message<DisposeCallback> {
    /**
     * @generated from field: uint64 async_id = 1;
     */
    asyncId: bigint;
    constructor(data?: PartialMessage<DisposeCallback>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "livekit.proto.DisposeCallback";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisposeCallback;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisposeCallback;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisposeCallback;
    static equals(a: DisposeCallback | PlainMessage<DisposeCallback> | undefined, b: DisposeCallback | PlainMessage<DisposeCallback> | undefined): boolean;
}
/**
 * @generated from message livekit.proto.LogRecord
 */
export declare class LogRecord extends Message<LogRecord> {
    /**
     * @generated from field: livekit.proto.LogLevel level = 1;
     */
    level: LogLevel;
    /**
     * e.g "livekit", "libwebrtc", "tokio-tungstenite", etc...
     *
     * @generated from field: string target = 2;
     */
    target: string;
    /**
     * @generated from field: optional string module_path = 3;
     */
    modulePath?: string;
    /**
     * @generated from field: optional string file = 4;
     */
    file?: string;
    /**
     * @generated from field: optional uint32 line = 5;
     */
    line?: number;
    /**
     * @generated from field: string message = 6;
     */
    message: string;
    constructor(data?: PartialMessage<LogRecord>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "livekit.proto.LogRecord";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogRecord;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogRecord;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogRecord;
    static equals(a: LogRecord | PlainMessage<LogRecord> | undefined, b: LogRecord | PlainMessage<LogRecord> | undefined): boolean;
}
/**
 * @generated from message livekit.proto.LogBatch
 */
export declare class LogBatch extends Message<LogBatch> {
    /**
     * @generated from field: repeated livekit.proto.LogRecord records = 1;
     */
    records: LogRecord[];
    constructor(data?: PartialMessage<LogBatch>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "livekit.proto.LogBatch";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogBatch;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogBatch;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogBatch;
    static equals(a: LogBatch | PlainMessage<LogBatch> | undefined, b: LogBatch | PlainMessage<LogBatch> | undefined): boolean;
}
/**
 * @generated from message livekit.proto.Panic
 */
export declare class Panic extends Message<Panic> {
    /**
     * @generated from field: string message = 1;
     */
    message: string;
    constructor(data?: PartialMessage<Panic>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "livekit.proto.Panic";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Panic;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Panic;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Panic;
    static equals(a: Panic | PlainMessage<Panic> | undefined, b: Panic | PlainMessage<Panic> | undefined): boolean;
}
//# sourceMappingURL=ffi_pb.d.ts.map