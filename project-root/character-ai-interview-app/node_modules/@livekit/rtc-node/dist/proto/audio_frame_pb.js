// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FfiOwnedHandle } from "./handle_pb.js";
/**
 * @generated from enum livekit.proto.AudioStreamType
 */
export var AudioStreamType;
(function (AudioStreamType) {
    /**
     * @generated from enum value: AUDIO_STREAM_NATIVE = 0;
     */
    AudioStreamType[AudioStreamType["AUDIO_STREAM_NATIVE"] = 0] = "AUDIO_STREAM_NATIVE";
    /**
     * @generated from enum value: AUDIO_STREAM_HTML = 1;
     */
    AudioStreamType[AudioStreamType["AUDIO_STREAM_HTML"] = 1] = "AUDIO_STREAM_HTML";
})(AudioStreamType || (AudioStreamType = {}));
// Retrieve enum metadata with: proto3.getEnumType(AudioStreamType)
proto3.util.setEnumType(AudioStreamType, "livekit.proto.AudioStreamType", [
    { no: 0, name: "AUDIO_STREAM_NATIVE" },
    { no: 1, name: "AUDIO_STREAM_HTML" },
]);
/**
 * @generated from enum livekit.proto.AudioSourceType
 */
export var AudioSourceType;
(function (AudioSourceType) {
    /**
     * @generated from enum value: AUDIO_SOURCE_NATIVE = 0;
     */
    AudioSourceType[AudioSourceType["AUDIO_SOURCE_NATIVE"] = 0] = "AUDIO_SOURCE_NATIVE";
})(AudioSourceType || (AudioSourceType = {}));
// Retrieve enum metadata with: proto3.getEnumType(AudioSourceType)
proto3.util.setEnumType(AudioSourceType, "livekit.proto.AudioSourceType", [
    { no: 0, name: "AUDIO_SOURCE_NATIVE" },
]);
/**
 * Create a new AudioStream
 * AudioStream is used to receive audio frames from a track
 *
 * @generated from message livekit.proto.NewAudioStreamRequest
 */
export class NewAudioStreamRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 track_handle = 1;
         */
        this.trackHandle = protoInt64.zero;
        /**
         * @generated from field: livekit.proto.AudioStreamType type = 2;
         */
        this.type = AudioStreamType.AUDIO_STREAM_NATIVE;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NewAudioStreamRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NewAudioStreamRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NewAudioStreamRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NewAudioStreamRequest, a, b);
    }
}
NewAudioStreamRequest.runtime = proto3;
NewAudioStreamRequest.typeName = "livekit.proto.NewAudioStreamRequest";
NewAudioStreamRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "track_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AudioStreamType) },
]);
/**
 * @generated from message livekit.proto.NewAudioStreamResponse
 */
export class NewAudioStreamResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NewAudioStreamResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NewAudioStreamResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NewAudioStreamResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NewAudioStreamResponse, a, b);
    }
}
NewAudioStreamResponse.runtime = proto3;
NewAudioStreamResponse.typeName = "livekit.proto.NewAudioStreamResponse";
NewAudioStreamResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "stream", kind: "message", T: OwnedAudioStream },
]);
/**
 * Create a new AudioSource
 *
 * @generated from message livekit.proto.NewAudioSourceRequest
 */
export class NewAudioSourceRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.AudioSourceType type = 1;
         */
        this.type = AudioSourceType.AUDIO_SOURCE_NATIVE;
        /**
         * @generated from field: uint32 sample_rate = 3;
         */
        this.sampleRate = 0;
        /**
         * @generated from field: uint32 num_channels = 4;
         */
        this.numChannels = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NewAudioSourceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NewAudioSourceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NewAudioSourceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NewAudioSourceRequest, a, b);
    }
}
NewAudioSourceRequest.runtime = proto3;
NewAudioSourceRequest.typeName = "livekit.proto.NewAudioSourceRequest";
NewAudioSourceRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(AudioSourceType) },
    { no: 2, name: "options", kind: "message", T: AudioSourceOptions, opt: true },
    { no: 3, name: "sample_rate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "num_channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "enable_queue", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
/**
 * @generated from message livekit.proto.NewAudioSourceResponse
 */
export class NewAudioSourceResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NewAudioSourceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NewAudioSourceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NewAudioSourceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NewAudioSourceResponse, a, b);
    }
}
NewAudioSourceResponse.runtime = proto3;
NewAudioSourceResponse.typeName = "livekit.proto.NewAudioSourceResponse";
NewAudioSourceResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "message", T: OwnedAudioSource },
]);
/**
 * Push a frame to an AudioSource
 * The data provided must be available as long as the client receive the callback.
 *
 * @generated from message livekit.proto.CaptureAudioFrameRequest
 */
export class CaptureAudioFrameRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 source_handle = 1;
         */
        this.sourceHandle = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CaptureAudioFrameRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CaptureAudioFrameRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CaptureAudioFrameRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CaptureAudioFrameRequest, a, b);
    }
}
CaptureAudioFrameRequest.runtime = proto3;
CaptureAudioFrameRequest.typeName = "livekit.proto.CaptureAudioFrameRequest";
CaptureAudioFrameRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "source_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "buffer", kind: "message", T: AudioFrameBufferInfo },
]);
/**
 * @generated from message livekit.proto.CaptureAudioFrameResponse
 */
export class CaptureAudioFrameResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CaptureAudioFrameResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CaptureAudioFrameResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CaptureAudioFrameResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CaptureAudioFrameResponse, a, b);
    }
}
CaptureAudioFrameResponse.runtime = proto3;
CaptureAudioFrameResponse.typeName = "livekit.proto.CaptureAudioFrameResponse";
CaptureAudioFrameResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.CaptureAudioFrameCallback
 */
export class CaptureAudioFrameCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CaptureAudioFrameCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CaptureAudioFrameCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CaptureAudioFrameCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CaptureAudioFrameCallback, a, b);
    }
}
CaptureAudioFrameCallback.runtime = proto3;
CaptureAudioFrameCallback.typeName = "livekit.proto.CaptureAudioFrameCallback";
CaptureAudioFrameCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * Create a new AudioResampler
 *
 * @generated from message livekit.proto.NewAudioResamplerRequest
 */
export class NewAudioResamplerRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NewAudioResamplerRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NewAudioResamplerRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NewAudioResamplerRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NewAudioResamplerRequest, a, b);
    }
}
NewAudioResamplerRequest.runtime = proto3;
NewAudioResamplerRequest.typeName = "livekit.proto.NewAudioResamplerRequest";
NewAudioResamplerRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.NewAudioResamplerResponse
 */
export class NewAudioResamplerResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NewAudioResamplerResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NewAudioResamplerResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NewAudioResamplerResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NewAudioResamplerResponse, a, b);
    }
}
NewAudioResamplerResponse.runtime = proto3;
NewAudioResamplerResponse.typeName = "livekit.proto.NewAudioResamplerResponse";
NewAudioResamplerResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "resampler", kind: "message", T: OwnedAudioResampler },
]);
/**
 * Remix and resample an audio frame
 *
 * @generated from message livekit.proto.RemixAndResampleRequest
 */
export class RemixAndResampleRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 resampler_handle = 1;
         */
        this.resamplerHandle = protoInt64.zero;
        /**
         * @generated from field: uint32 num_channels = 3;
         */
        this.numChannels = 0;
        /**
         * @generated from field: uint32 sample_rate = 4;
         */
        this.sampleRate = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RemixAndResampleRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RemixAndResampleRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RemixAndResampleRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RemixAndResampleRequest, a, b);
    }
}
RemixAndResampleRequest.runtime = proto3;
RemixAndResampleRequest.typeName = "livekit.proto.RemixAndResampleRequest";
RemixAndResampleRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "resampler_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "buffer", kind: "message", T: AudioFrameBufferInfo },
    { no: 3, name: "num_channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "sample_rate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message livekit.proto.RemixAndResampleResponse
 */
export class RemixAndResampleResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RemixAndResampleResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RemixAndResampleResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RemixAndResampleResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RemixAndResampleResponse, a, b);
    }
}
RemixAndResampleResponse.runtime = proto3;
RemixAndResampleResponse.typeName = "livekit.proto.RemixAndResampleResponse";
RemixAndResampleResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "buffer", kind: "message", T: OwnedAudioFrameBuffer },
]);
/**
 * @generated from message livekit.proto.AudioFrameBufferInfo
 */
export class AudioFrameBufferInfo extends Message {
    constructor(data) {
        super();
        /**
         * *const i16
         *
         * @generated from field: uint64 data_ptr = 1;
         */
        this.dataPtr = protoInt64.zero;
        /**
         * @generated from field: uint32 num_channels = 2;
         */
        this.numChannels = 0;
        /**
         * @generated from field: uint32 sample_rate = 3;
         */
        this.sampleRate = 0;
        /**
         * @generated from field: uint32 samples_per_channel = 4;
         */
        this.samplesPerChannel = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioFrameBufferInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioFrameBufferInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioFrameBufferInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AudioFrameBufferInfo, a, b);
    }
}
AudioFrameBufferInfo.runtime = proto3;
AudioFrameBufferInfo.typeName = "livekit.proto.AudioFrameBufferInfo";
AudioFrameBufferInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "num_channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "sample_rate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "samples_per_channel", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message livekit.proto.OwnedAudioFrameBuffer
 */
export class OwnedAudioFrameBuffer extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OwnedAudioFrameBuffer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OwnedAudioFrameBuffer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OwnedAudioFrameBuffer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OwnedAudioFrameBuffer, a, b);
    }
}
OwnedAudioFrameBuffer.runtime = proto3;
OwnedAudioFrameBuffer.typeName = "livekit.proto.OwnedAudioFrameBuffer";
OwnedAudioFrameBuffer.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: AudioFrameBufferInfo },
]);
/**
 * @generated from message livekit.proto.AudioStreamInfo
 */
export class AudioStreamInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.AudioStreamType type = 1;
         */
        this.type = AudioStreamType.AUDIO_STREAM_NATIVE;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioStreamInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioStreamInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioStreamInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AudioStreamInfo, a, b);
    }
}
AudioStreamInfo.runtime = proto3;
AudioStreamInfo.typeName = "livekit.proto.AudioStreamInfo";
AudioStreamInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(AudioStreamType) },
]);
/**
 * @generated from message livekit.proto.OwnedAudioStream
 */
export class OwnedAudioStream extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OwnedAudioStream().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OwnedAudioStream().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OwnedAudioStream().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OwnedAudioStream, a, b);
    }
}
OwnedAudioStream.runtime = proto3;
OwnedAudioStream.typeName = "livekit.proto.OwnedAudioStream";
OwnedAudioStream.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: AudioStreamInfo },
]);
/**
 * @generated from message livekit.proto.AudioStreamEvent
 */
export class AudioStreamEvent extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 stream_handle = 1;
         */
        this.streamHandle = protoInt64.zero;
        /**
         * @generated from oneof livekit.proto.AudioStreamEvent.message
         */
        this.message = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioStreamEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioStreamEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioStreamEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AudioStreamEvent, a, b);
    }
}
AudioStreamEvent.runtime = proto3;
AudioStreamEvent.typeName = "livekit.proto.AudioStreamEvent";
AudioStreamEvent.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "frame_received", kind: "message", T: AudioFrameReceived, oneof: "message" },
    { no: 3, name: "eos", kind: "message", T: AudioStreamEOS, oneof: "message" },
]);
/**
 * @generated from message livekit.proto.AudioFrameReceived
 */
export class AudioFrameReceived extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioFrameReceived().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioFrameReceived().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioFrameReceived().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AudioFrameReceived, a, b);
    }
}
AudioFrameReceived.runtime = proto3;
AudioFrameReceived.typeName = "livekit.proto.AudioFrameReceived";
AudioFrameReceived.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "frame", kind: "message", T: OwnedAudioFrameBuffer },
]);
/**
 * @generated from message livekit.proto.AudioStreamEOS
 */
export class AudioStreamEOS extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioStreamEOS().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioStreamEOS().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioStreamEOS().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AudioStreamEOS, a, b);
    }
}
AudioStreamEOS.runtime = proto3;
AudioStreamEOS.typeName = "livekit.proto.AudioStreamEOS";
AudioStreamEOS.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.AudioSourceOptions
 */
export class AudioSourceOptions extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool echo_cancellation = 1;
         */
        this.echoCancellation = false;
        /**
         * @generated from field: bool noise_suppression = 2;
         */
        this.noiseSuppression = false;
        /**
         * @generated from field: bool auto_gain_control = 3;
         */
        this.autoGainControl = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioSourceOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioSourceOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioSourceOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AudioSourceOptions, a, b);
    }
}
AudioSourceOptions.runtime = proto3;
AudioSourceOptions.typeName = "livekit.proto.AudioSourceOptions";
AudioSourceOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "echo_cancellation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "noise_suppression", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "auto_gain_control", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.proto.AudioSourceInfo
 */
export class AudioSourceInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.AudioSourceType type = 2;
         */
        this.type = AudioSourceType.AUDIO_SOURCE_NATIVE;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioSourceInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioSourceInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioSourceInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AudioSourceInfo, a, b);
    }
}
AudioSourceInfo.runtime = proto3;
AudioSourceInfo.typeName = "livekit.proto.AudioSourceInfo";
AudioSourceInfo.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AudioSourceType) },
]);
/**
 * @generated from message livekit.proto.OwnedAudioSource
 */
export class OwnedAudioSource extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OwnedAudioSource().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OwnedAudioSource().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OwnedAudioSource().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OwnedAudioSource, a, b);
    }
}
OwnedAudioSource.runtime = proto3;
OwnedAudioSource.typeName = "livekit.proto.OwnedAudioSource";
OwnedAudioSource.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: AudioSourceInfo },
]);
/**
 * @generated from message livekit.proto.AudioResamplerInfo
 */
export class AudioResamplerInfo extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioResamplerInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioResamplerInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioResamplerInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AudioResamplerInfo, a, b);
    }
}
AudioResamplerInfo.runtime = proto3;
AudioResamplerInfo.typeName = "livekit.proto.AudioResamplerInfo";
AudioResamplerInfo.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.OwnedAudioResampler
 */
export class OwnedAudioResampler extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OwnedAudioResampler().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OwnedAudioResampler().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OwnedAudioResampler().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OwnedAudioResampler, a, b);
    }
}
OwnedAudioResampler.runtime = proto3;
OwnedAudioResampler.typeName = "livekit.proto.OwnedAudioResampler";
OwnedAudioResampler.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: AudioResamplerInfo },
]);
//# sourceMappingURL=audio_frame_pb.js.map