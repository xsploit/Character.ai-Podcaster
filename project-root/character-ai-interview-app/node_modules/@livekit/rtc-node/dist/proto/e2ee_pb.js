// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * @generated from enum livekit.proto.EncryptionType
 */
export var EncryptionType;
(function (EncryptionType) {
    /**
     * @generated from enum value: NONE = 0;
     */
    EncryptionType[EncryptionType["NONE"] = 0] = "NONE";
    /**
     * @generated from enum value: GCM = 1;
     */
    EncryptionType[EncryptionType["GCM"] = 1] = "GCM";
    /**
     * @generated from enum value: CUSTOM = 2;
     */
    EncryptionType[EncryptionType["CUSTOM"] = 2] = "CUSTOM";
})(EncryptionType || (EncryptionType = {}));
// Retrieve enum metadata with: proto3.getEnumType(EncryptionType)
proto3.util.setEnumType(EncryptionType, "livekit.proto.EncryptionType", [
    { no: 0, name: "NONE" },
    { no: 1, name: "GCM" },
    { no: 2, name: "CUSTOM" },
]);
/**
 * @generated from enum livekit.proto.EncryptionState
 */
export var EncryptionState;
(function (EncryptionState) {
    /**
     * @generated from enum value: NEW = 0;
     */
    EncryptionState[EncryptionState["NEW"] = 0] = "NEW";
    /**
     * @generated from enum value: OK = 1;
     */
    EncryptionState[EncryptionState["OK"] = 1] = "OK";
    /**
     * @generated from enum value: ENCRYPTION_FAILED = 2;
     */
    EncryptionState[EncryptionState["ENCRYPTION_FAILED"] = 2] = "ENCRYPTION_FAILED";
    /**
     * @generated from enum value: DECRYPTION_FAILED = 3;
     */
    EncryptionState[EncryptionState["DECRYPTION_FAILED"] = 3] = "DECRYPTION_FAILED";
    /**
     * @generated from enum value: MISSING_KEY = 4;
     */
    EncryptionState[EncryptionState["MISSING_KEY"] = 4] = "MISSING_KEY";
    /**
     * @generated from enum value: KEY_RATCHETED = 5;
     */
    EncryptionState[EncryptionState["KEY_RATCHETED"] = 5] = "KEY_RATCHETED";
    /**
     * @generated from enum value: INTERNAL_ERROR = 6;
     */
    EncryptionState[EncryptionState["INTERNAL_ERROR"] = 6] = "INTERNAL_ERROR";
})(EncryptionState || (EncryptionState = {}));
// Retrieve enum metadata with: proto3.getEnumType(EncryptionState)
proto3.util.setEnumType(EncryptionState, "livekit.proto.EncryptionState", [
    { no: 0, name: "NEW" },
    { no: 1, name: "OK" },
    { no: 2, name: "ENCRYPTION_FAILED" },
    { no: 3, name: "DECRYPTION_FAILED" },
    { no: 4, name: "MISSING_KEY" },
    { no: 5, name: "KEY_RATCHETED" },
    { no: 6, name: "INTERNAL_ERROR" },
]);
/**
 * @generated from message livekit.proto.FrameCryptor
 */
export class FrameCryptor extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string track_sid = 2;
         */
        this.trackSid = "";
        /**
         * @generated from field: int32 key_index = 3;
         */
        this.keyIndex = 0;
        /**
         * @generated from field: bool enabled = 4;
         */
        this.enabled = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FrameCryptor().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FrameCryptor().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FrameCryptor().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FrameCryptor, a, b);
    }
}
FrameCryptor.runtime = proto3;
FrameCryptor.typeName = "livekit.proto.FrameCryptor";
FrameCryptor.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.proto.KeyProviderOptions
 */
export class KeyProviderOptions extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 ratchet_window_size = 2;
         */
        this.ratchetWindowSize = 0;
        /**
         * @generated from field: bytes ratchet_salt = 3;
         */
        this.ratchetSalt = new Uint8Array(0);
        /**
         * -1 = no tolerence
         *
         * @generated from field: int32 failure_tolerance = 4;
         */
        this.failureTolerance = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new KeyProviderOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new KeyProviderOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new KeyProviderOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(KeyProviderOptions, a, b);
    }
}
KeyProviderOptions.runtime = proto3;
KeyProviderOptions.typeName = "livekit.proto.KeyProviderOptions";
KeyProviderOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "shared_key", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 2, name: "ratchet_window_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "ratchet_salt", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "failure_tolerance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message livekit.proto.E2eeOptions
 */
export class E2eeOptions extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.EncryptionType encryption_type = 1;
         */
        this.encryptionType = EncryptionType.NONE;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new E2eeOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new E2eeOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new E2eeOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(E2eeOptions, a, b);
    }
}
E2eeOptions.runtime = proto3;
E2eeOptions.typeName = "livekit.proto.E2eeOptions";
E2eeOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "encryption_type", kind: "enum", T: proto3.getEnumType(EncryptionType) },
    { no: 2, name: "key_provider_options", kind: "message", T: KeyProviderOptions },
]);
/**
 * @generated from message livekit.proto.E2eeManagerSetEnabledRequest
 */
export class E2eeManagerSetEnabledRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool enabled = 1;
         */
        this.enabled = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new E2eeManagerSetEnabledRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new E2eeManagerSetEnabledRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new E2eeManagerSetEnabledRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(E2eeManagerSetEnabledRequest, a, b);
    }
}
E2eeManagerSetEnabledRequest.runtime = proto3;
E2eeManagerSetEnabledRequest.typeName = "livekit.proto.E2eeManagerSetEnabledRequest";
E2eeManagerSetEnabledRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.proto.E2eeManagerSetEnabledResponse
 */
export class E2eeManagerSetEnabledResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new E2eeManagerSetEnabledResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new E2eeManagerSetEnabledResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new E2eeManagerSetEnabledResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(E2eeManagerSetEnabledResponse, a, b);
    }
}
E2eeManagerSetEnabledResponse.runtime = proto3;
E2eeManagerSetEnabledResponse.typeName = "livekit.proto.E2eeManagerSetEnabledResponse";
E2eeManagerSetEnabledResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.E2eeManagerGetFrameCryptorsRequest
 */
export class E2eeManagerGetFrameCryptorsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new E2eeManagerGetFrameCryptorsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new E2eeManagerGetFrameCryptorsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new E2eeManagerGetFrameCryptorsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(E2eeManagerGetFrameCryptorsRequest, a, b);
    }
}
E2eeManagerGetFrameCryptorsRequest.runtime = proto3;
E2eeManagerGetFrameCryptorsRequest.typeName = "livekit.proto.E2eeManagerGetFrameCryptorsRequest";
E2eeManagerGetFrameCryptorsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.E2eeManagerGetFrameCryptorsResponse
 */
export class E2eeManagerGetFrameCryptorsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated livekit.proto.FrameCryptor frame_cryptors = 1;
         */
        this.frameCryptors = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new E2eeManagerGetFrameCryptorsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new E2eeManagerGetFrameCryptorsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new E2eeManagerGetFrameCryptorsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(E2eeManagerGetFrameCryptorsResponse, a, b);
    }
}
E2eeManagerGetFrameCryptorsResponse.runtime = proto3;
E2eeManagerGetFrameCryptorsResponse.typeName = "livekit.proto.E2eeManagerGetFrameCryptorsResponse";
E2eeManagerGetFrameCryptorsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "frame_cryptors", kind: "message", T: FrameCryptor, repeated: true },
]);
/**
 * @generated from message livekit.proto.FrameCryptorSetEnabledRequest
 */
export class FrameCryptorSetEnabledRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string track_sid = 2;
         */
        this.trackSid = "";
        /**
         * @generated from field: bool enabled = 3;
         */
        this.enabled = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FrameCryptorSetEnabledRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FrameCryptorSetEnabledRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FrameCryptorSetEnabledRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FrameCryptorSetEnabledRequest, a, b);
    }
}
FrameCryptorSetEnabledRequest.runtime = proto3;
FrameCryptorSetEnabledRequest.typeName = "livekit.proto.FrameCryptorSetEnabledRequest";
FrameCryptorSetEnabledRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.proto.FrameCryptorSetEnabledResponse
 */
export class FrameCryptorSetEnabledResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FrameCryptorSetEnabledResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FrameCryptorSetEnabledResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FrameCryptorSetEnabledResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FrameCryptorSetEnabledResponse, a, b);
    }
}
FrameCryptorSetEnabledResponse.runtime = proto3;
FrameCryptorSetEnabledResponse.typeName = "livekit.proto.FrameCryptorSetEnabledResponse";
FrameCryptorSetEnabledResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.FrameCryptorSetKeyIndexRequest
 */
export class FrameCryptorSetKeyIndexRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string track_sid = 2;
         */
        this.trackSid = "";
        /**
         * @generated from field: int32 key_index = 3;
         */
        this.keyIndex = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FrameCryptorSetKeyIndexRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FrameCryptorSetKeyIndexRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FrameCryptorSetKeyIndexRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FrameCryptorSetKeyIndexRequest, a, b);
    }
}
FrameCryptorSetKeyIndexRequest.runtime = proto3;
FrameCryptorSetKeyIndexRequest.typeName = "livekit.proto.FrameCryptorSetKeyIndexRequest";
FrameCryptorSetKeyIndexRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message livekit.proto.FrameCryptorSetKeyIndexResponse
 */
export class FrameCryptorSetKeyIndexResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FrameCryptorSetKeyIndexResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FrameCryptorSetKeyIndexResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FrameCryptorSetKeyIndexResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FrameCryptorSetKeyIndexResponse, a, b);
    }
}
FrameCryptorSetKeyIndexResponse.runtime = proto3;
FrameCryptorSetKeyIndexResponse.typeName = "livekit.proto.FrameCryptorSetKeyIndexResponse";
FrameCryptorSetKeyIndexResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.SetSharedKeyRequest
 */
export class SetSharedKeyRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes shared_key = 1;
         */
        this.sharedKey = new Uint8Array(0);
        /**
         * @generated from field: int32 key_index = 2;
         */
        this.keyIndex = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetSharedKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetSharedKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetSharedKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetSharedKeyRequest, a, b);
    }
}
SetSharedKeyRequest.runtime = proto3;
SetSharedKeyRequest.typeName = "livekit.proto.SetSharedKeyRequest";
SetSharedKeyRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "shared_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message livekit.proto.SetSharedKeyResponse
 */
export class SetSharedKeyResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetSharedKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetSharedKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetSharedKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetSharedKeyResponse, a, b);
    }
}
SetSharedKeyResponse.runtime = proto3;
SetSharedKeyResponse.typeName = "livekit.proto.SetSharedKeyResponse";
SetSharedKeyResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.RatchetSharedKeyRequest
 */
export class RatchetSharedKeyRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 key_index = 1;
         */
        this.keyIndex = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RatchetSharedKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RatchetSharedKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RatchetSharedKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RatchetSharedKeyRequest, a, b);
    }
}
RatchetSharedKeyRequest.runtime = proto3;
RatchetSharedKeyRequest.typeName = "livekit.proto.RatchetSharedKeyRequest";
RatchetSharedKeyRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message livekit.proto.RatchetSharedKeyResponse
 */
export class RatchetSharedKeyResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RatchetSharedKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RatchetSharedKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RatchetSharedKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RatchetSharedKeyResponse, a, b);
    }
}
RatchetSharedKeyResponse.runtime = proto3;
RatchetSharedKeyResponse.typeName = "livekit.proto.RatchetSharedKeyResponse";
RatchetSharedKeyResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "new_key", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
]);
/**
 * @generated from message livekit.proto.GetSharedKeyRequest
 */
export class GetSharedKeyRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 key_index = 1;
         */
        this.keyIndex = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSharedKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSharedKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSharedKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetSharedKeyRequest, a, b);
    }
}
GetSharedKeyRequest.runtime = proto3;
GetSharedKeyRequest.typeName = "livekit.proto.GetSharedKeyRequest";
GetSharedKeyRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message livekit.proto.GetSharedKeyResponse
 */
export class GetSharedKeyResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSharedKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSharedKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSharedKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetSharedKeyResponse, a, b);
    }
}
GetSharedKeyResponse.runtime = proto3;
GetSharedKeyResponse.typeName = "livekit.proto.GetSharedKeyResponse";
GetSharedKeyResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
]);
/**
 * @generated from message livekit.proto.SetKeyRequest
 */
export class SetKeyRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: bytes key = 2;
         */
        this.key = new Uint8Array(0);
        /**
         * @generated from field: int32 key_index = 3;
         */
        this.keyIndex = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetKeyRequest, a, b);
    }
}
SetKeyRequest.runtime = proto3;
SetKeyRequest.typeName = "livekit.proto.SetKeyRequest";
SetKeyRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message livekit.proto.SetKeyResponse
 */
export class SetKeyResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetKeyResponse, a, b);
    }
}
SetKeyResponse.runtime = proto3;
SetKeyResponse.typeName = "livekit.proto.SetKeyResponse";
SetKeyResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.RatchetKeyRequest
 */
export class RatchetKeyRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: int32 key_index = 2;
         */
        this.keyIndex = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RatchetKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RatchetKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RatchetKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RatchetKeyRequest, a, b);
    }
}
RatchetKeyRequest.runtime = proto3;
RatchetKeyRequest.typeName = "livekit.proto.RatchetKeyRequest";
RatchetKeyRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message livekit.proto.RatchetKeyResponse
 */
export class RatchetKeyResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RatchetKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RatchetKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RatchetKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RatchetKeyResponse, a, b);
    }
}
RatchetKeyResponse.runtime = proto3;
RatchetKeyResponse.typeName = "livekit.proto.RatchetKeyResponse";
RatchetKeyResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "new_key", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
]);
/**
 * @generated from message livekit.proto.GetKeyRequest
 */
export class GetKeyRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: int32 key_index = 2;
         */
        this.keyIndex = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetKeyRequest, a, b);
    }
}
GetKeyRequest.runtime = proto3;
GetKeyRequest.typeName = "livekit.proto.GetKeyRequest";
GetKeyRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message livekit.proto.GetKeyResponse
 */
export class GetKeyResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetKeyResponse, a, b);
    }
}
GetKeyResponse.runtime = proto3;
GetKeyResponse.typeName = "livekit.proto.GetKeyResponse";
GetKeyResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
]);
/**
 * @generated from message livekit.proto.E2eeRequest
 */
export class E2eeRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 room_handle = 1;
         */
        this.roomHandle = protoInt64.zero;
        /**
         * @generated from oneof livekit.proto.E2eeRequest.message
         */
        this.message = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new E2eeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new E2eeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new E2eeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(E2eeRequest, a, b);
    }
}
E2eeRequest.runtime = proto3;
E2eeRequest.typeName = "livekit.proto.E2eeRequest";
E2eeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "manager_set_enabled", kind: "message", T: E2eeManagerSetEnabledRequest, oneof: "message" },
    { no: 3, name: "manager_get_frame_cryptors", kind: "message", T: E2eeManagerGetFrameCryptorsRequest, oneof: "message" },
    { no: 4, name: "cryptor_set_enabled", kind: "message", T: FrameCryptorSetEnabledRequest, oneof: "message" },
    { no: 5, name: "cryptor_set_key_index", kind: "message", T: FrameCryptorSetKeyIndexRequest, oneof: "message" },
    { no: 6, name: "set_shared_key", kind: "message", T: SetSharedKeyRequest, oneof: "message" },
    { no: 7, name: "ratchet_shared_key", kind: "message", T: RatchetSharedKeyRequest, oneof: "message" },
    { no: 8, name: "get_shared_key", kind: "message", T: GetSharedKeyRequest, oneof: "message" },
    { no: 9, name: "set_key", kind: "message", T: SetKeyRequest, oneof: "message" },
    { no: 10, name: "ratchet_key", kind: "message", T: RatchetKeyRequest, oneof: "message" },
    { no: 11, name: "get_key", kind: "message", T: GetKeyRequest, oneof: "message" },
]);
/**
 * @generated from message livekit.proto.E2eeResponse
 */
export class E2eeResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof livekit.proto.E2eeResponse.message
         */
        this.message = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new E2eeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new E2eeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new E2eeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(E2eeResponse, a, b);
    }
}
E2eeResponse.runtime = proto3;
E2eeResponse.typeName = "livekit.proto.E2eeResponse";
E2eeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "manager_set_enabled", kind: "message", T: E2eeManagerSetEnabledResponse, oneof: "message" },
    { no: 2, name: "manager_get_frame_cryptors", kind: "message", T: E2eeManagerGetFrameCryptorsResponse, oneof: "message" },
    { no: 3, name: "cryptor_set_enabled", kind: "message", T: FrameCryptorSetEnabledResponse, oneof: "message" },
    { no: 4, name: "cryptor_set_key_index", kind: "message", T: FrameCryptorSetKeyIndexResponse, oneof: "message" },
    { no: 5, name: "set_shared_key", kind: "message", T: SetSharedKeyResponse, oneof: "message" },
    { no: 6, name: "ratchet_shared_key", kind: "message", T: RatchetSharedKeyResponse, oneof: "message" },
    { no: 7, name: "get_shared_key", kind: "message", T: GetSharedKeyResponse, oneof: "message" },
    { no: 8, name: "set_key", kind: "message", T: SetKeyResponse, oneof: "message" },
    { no: 9, name: "ratchet_key", kind: "message", T: RatchetKeyResponse, oneof: "message" },
    { no: 10, name: "get_key", kind: "message", T: GetKeyResponse, oneof: "message" },
]);
//# sourceMappingURL=e2ee_pb.js.map