// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { OwnedParticipant } from "./participant_pb.js";
import { OwnedTrack, OwnedTrackPublication, TrackSource } from "./track_pb.js";
import { RtcStats } from "./stats_pb.js";
import { VideoCodec } from "./video_frame_pb.js";
import { E2eeOptions, EncryptionState } from "./e2ee_pb.js";
import { FfiOwnedHandle } from "./handle_pb.js";
/**
 * @generated from enum livekit.proto.IceTransportType
 */
export var IceTransportType;
(function (IceTransportType) {
    /**
     * @generated from enum value: TRANSPORT_RELAY = 0;
     */
    IceTransportType[IceTransportType["TRANSPORT_RELAY"] = 0] = "TRANSPORT_RELAY";
    /**
     * @generated from enum value: TRANSPORT_NOHOST = 1;
     */
    IceTransportType[IceTransportType["TRANSPORT_NOHOST"] = 1] = "TRANSPORT_NOHOST";
    /**
     * @generated from enum value: TRANSPORT_ALL = 2;
     */
    IceTransportType[IceTransportType["TRANSPORT_ALL"] = 2] = "TRANSPORT_ALL";
})(IceTransportType || (IceTransportType = {}));
// Retrieve enum metadata with: proto3.getEnumType(IceTransportType)
proto3.util.setEnumType(IceTransportType, "livekit.proto.IceTransportType", [
    { no: 0, name: "TRANSPORT_RELAY" },
    { no: 1, name: "TRANSPORT_NOHOST" },
    { no: 2, name: "TRANSPORT_ALL" },
]);
/**
 * @generated from enum livekit.proto.ContinualGatheringPolicy
 */
export var ContinualGatheringPolicy;
(function (ContinualGatheringPolicy) {
    /**
     * @generated from enum value: GATHER_ONCE = 0;
     */
    ContinualGatheringPolicy[ContinualGatheringPolicy["GATHER_ONCE"] = 0] = "GATHER_ONCE";
    /**
     * @generated from enum value: GATHER_CONTINUALLY = 1;
     */
    ContinualGatheringPolicy[ContinualGatheringPolicy["GATHER_CONTINUALLY"] = 1] = "GATHER_CONTINUALLY";
})(ContinualGatheringPolicy || (ContinualGatheringPolicy = {}));
// Retrieve enum metadata with: proto3.getEnumType(ContinualGatheringPolicy)
proto3.util.setEnumType(ContinualGatheringPolicy, "livekit.proto.ContinualGatheringPolicy", [
    { no: 0, name: "GATHER_ONCE" },
    { no: 1, name: "GATHER_CONTINUALLY" },
]);
/**
 * @generated from enum livekit.proto.ConnectionQuality
 */
export var ConnectionQuality;
(function (ConnectionQuality) {
    /**
     * @generated from enum value: QUALITY_POOR = 0;
     */
    ConnectionQuality[ConnectionQuality["QUALITY_POOR"] = 0] = "QUALITY_POOR";
    /**
     * @generated from enum value: QUALITY_GOOD = 1;
     */
    ConnectionQuality[ConnectionQuality["QUALITY_GOOD"] = 1] = "QUALITY_GOOD";
    /**
     * @generated from enum value: QUALITY_EXCELLENT = 2;
     */
    ConnectionQuality[ConnectionQuality["QUALITY_EXCELLENT"] = 2] = "QUALITY_EXCELLENT";
    /**
     * @generated from enum value: QUALITY_LOST = 3;
     */
    ConnectionQuality[ConnectionQuality["QUALITY_LOST"] = 3] = "QUALITY_LOST";
})(ConnectionQuality || (ConnectionQuality = {}));
// Retrieve enum metadata with: proto3.getEnumType(ConnectionQuality)
proto3.util.setEnumType(ConnectionQuality, "livekit.proto.ConnectionQuality", [
    { no: 0, name: "QUALITY_POOR" },
    { no: 1, name: "QUALITY_GOOD" },
    { no: 2, name: "QUALITY_EXCELLENT" },
    { no: 3, name: "QUALITY_LOST" },
]);
/**
 * @generated from enum livekit.proto.ConnectionState
 */
export var ConnectionState;
(function (ConnectionState) {
    /**
     * @generated from enum value: CONN_DISCONNECTED = 0;
     */
    ConnectionState[ConnectionState["CONN_DISCONNECTED"] = 0] = "CONN_DISCONNECTED";
    /**
     * @generated from enum value: CONN_CONNECTED = 1;
     */
    ConnectionState[ConnectionState["CONN_CONNECTED"] = 1] = "CONN_CONNECTED";
    /**
     * @generated from enum value: CONN_RECONNECTING = 2;
     */
    ConnectionState[ConnectionState["CONN_RECONNECTING"] = 2] = "CONN_RECONNECTING";
})(ConnectionState || (ConnectionState = {}));
// Retrieve enum metadata with: proto3.getEnumType(ConnectionState)
proto3.util.setEnumType(ConnectionState, "livekit.proto.ConnectionState", [
    { no: 0, name: "CONN_DISCONNECTED" },
    { no: 1, name: "CONN_CONNECTED" },
    { no: 2, name: "CONN_RECONNECTING" },
]);
/**
 * @generated from enum livekit.proto.DataPacketKind
 */
export var DataPacketKind;
(function (DataPacketKind) {
    /**
     * @generated from enum value: KIND_LOSSY = 0;
     */
    DataPacketKind[DataPacketKind["KIND_LOSSY"] = 0] = "KIND_LOSSY";
    /**
     * @generated from enum value: KIND_RELIABLE = 1;
     */
    DataPacketKind[DataPacketKind["KIND_RELIABLE"] = 1] = "KIND_RELIABLE";
})(DataPacketKind || (DataPacketKind = {}));
// Retrieve enum metadata with: proto3.getEnumType(DataPacketKind)
proto3.util.setEnumType(DataPacketKind, "livekit.proto.DataPacketKind", [
    { no: 0, name: "KIND_LOSSY" },
    { no: 1, name: "KIND_RELIABLE" },
]);
/**
 * @generated from enum livekit.proto.DisconnectReason
 */
export var DisconnectReason;
(function (DisconnectReason) {
    /**
     * @generated from enum value: UNKNOWN_REASON = 0;
     */
    DisconnectReason[DisconnectReason["UNKNOWN_REASON"] = 0] = "UNKNOWN_REASON";
    /**
     * the client initiated the disconnect
     *
     * @generated from enum value: CLIENT_INITIATED = 1;
     */
    DisconnectReason[DisconnectReason["CLIENT_INITIATED"] = 1] = "CLIENT_INITIATED";
    /**
     * another participant with the same identity has joined the room
     *
     * @generated from enum value: DUPLICATE_IDENTITY = 2;
     */
    DisconnectReason[DisconnectReason["DUPLICATE_IDENTITY"] = 2] = "DUPLICATE_IDENTITY";
    /**
     * the server instance is shutting down
     *
     * @generated from enum value: SERVER_SHUTDOWN = 3;
     */
    DisconnectReason[DisconnectReason["SERVER_SHUTDOWN"] = 3] = "SERVER_SHUTDOWN";
    /**
     * RoomService.RemoveParticipant was called
     *
     * @generated from enum value: PARTICIPANT_REMOVED = 4;
     */
    DisconnectReason[DisconnectReason["PARTICIPANT_REMOVED"] = 4] = "PARTICIPANT_REMOVED";
    /**
     * RoomService.DeleteRoom was called
     *
     * @generated from enum value: ROOM_DELETED = 5;
     */
    DisconnectReason[DisconnectReason["ROOM_DELETED"] = 5] = "ROOM_DELETED";
    /**
     * the client is attempting to resume a session, but server is not aware of it
     *
     * @generated from enum value: STATE_MISMATCH = 6;
     */
    DisconnectReason[DisconnectReason["STATE_MISMATCH"] = 6] = "STATE_MISMATCH";
    /**
     * client was unable to connect fully
     *
     * @generated from enum value: JOIN_FAILURE = 7;
     */
    DisconnectReason[DisconnectReason["JOIN_FAILURE"] = 7] = "JOIN_FAILURE";
    /**
     * Cloud-only, the server requested Participant to migrate the connection elsewhere
     *
     * @generated from enum value: MIGRATION = 8;
     */
    DisconnectReason[DisconnectReason["MIGRATION"] = 8] = "MIGRATION";
    /**
     * the signal websocket was closed unexpectedly
     *
     * @generated from enum value: SIGNAL_CLOSE = 9;
     */
    DisconnectReason[DisconnectReason["SIGNAL_CLOSE"] = 9] = "SIGNAL_CLOSE";
    /**
     * the room was closed, due to all Standard and Ingress participants having left
     *
     * @generated from enum value: ROOM_CLOSED = 10;
     */
    DisconnectReason[DisconnectReason["ROOM_CLOSED"] = 10] = "ROOM_CLOSED";
})(DisconnectReason || (DisconnectReason = {}));
// Retrieve enum metadata with: proto3.getEnumType(DisconnectReason)
proto3.util.setEnumType(DisconnectReason, "livekit.proto.DisconnectReason", [
    { no: 0, name: "UNKNOWN_REASON" },
    { no: 1, name: "CLIENT_INITIATED" },
    { no: 2, name: "DUPLICATE_IDENTITY" },
    { no: 3, name: "SERVER_SHUTDOWN" },
    { no: 4, name: "PARTICIPANT_REMOVED" },
    { no: 5, name: "ROOM_DELETED" },
    { no: 6, name: "STATE_MISMATCH" },
    { no: 7, name: "JOIN_FAILURE" },
    { no: 8, name: "MIGRATION" },
    { no: 9, name: "SIGNAL_CLOSE" },
    { no: 10, name: "ROOM_CLOSED" },
]);
/**
 * Connect to a new LiveKit room
 *
 * @generated from message livekit.proto.ConnectRequest
 */
export class ConnectRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string url = 1;
         */
        this.url = "";
        /**
         * @generated from field: string token = 2;
         */
        this.token = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConnectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConnectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConnectRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConnectRequest, a, b);
    }
}
ConnectRequest.runtime = proto3;
ConnectRequest.typeName = "livekit.proto.ConnectRequest";
ConnectRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: RoomOptions },
]);
/**
 * @generated from message livekit.proto.ConnectResponse
 */
export class ConnectResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConnectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConnectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConnectResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConnectResponse, a, b);
    }
}
ConnectResponse.runtime = proto3;
ConnectResponse.typeName = "livekit.proto.ConnectResponse";
ConnectResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.ConnectCallback
 */
export class ConnectCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        /**
         * @generated from field: repeated livekit.proto.ConnectCallback.ParticipantWithTracks participants = 5;
         */
        this.participants = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConnectCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConnectCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConnectCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConnectCallback, a, b);
    }
}
ConnectCallback.runtime = proto3;
ConnectCallback.typeName = "livekit.proto.ConnectCallback";
ConnectCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "room", kind: "message", T: OwnedRoom },
    { no: 4, name: "local_participant", kind: "message", T: OwnedParticipant },
    { no: 5, name: "participants", kind: "message", T: ConnectCallback_ParticipantWithTracks, repeated: true },
]);
/**
 * @generated from message livekit.proto.ConnectCallback.ParticipantWithTracks
 */
export class ConnectCallback_ParticipantWithTracks extends Message {
    constructor(data) {
        super();
        /**
         * TrackInfo are not needed here, if we're subscribed to a track, the FfiServer will send
         * a TrackSubscribed event
         *
         * @generated from field: repeated livekit.proto.OwnedTrackPublication publications = 2;
         */
        this.publications = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConnectCallback_ParticipantWithTracks().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConnectCallback_ParticipantWithTracks().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConnectCallback_ParticipantWithTracks().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConnectCallback_ParticipantWithTracks, a, b);
    }
}
ConnectCallback_ParticipantWithTracks.runtime = proto3;
ConnectCallback_ParticipantWithTracks.typeName = "livekit.proto.ConnectCallback.ParticipantWithTracks";
ConnectCallback_ParticipantWithTracks.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant", kind: "message", T: OwnedParticipant },
    { no: 2, name: "publications", kind: "message", T: OwnedTrackPublication, repeated: true },
]);
/**
 * Disconnect from the a room
 *
 * @generated from message livekit.proto.DisconnectRequest
 */
export class DisconnectRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 room_handle = 1;
         */
        this.roomHandle = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DisconnectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DisconnectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DisconnectRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DisconnectRequest, a, b);
    }
}
DisconnectRequest.runtime = proto3;
DisconnectRequest.typeName = "livekit.proto.DisconnectRequest";
DisconnectRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.DisconnectResponse
 */
export class DisconnectResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DisconnectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DisconnectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DisconnectResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DisconnectResponse, a, b);
    }
}
DisconnectResponse.runtime = proto3;
DisconnectResponse.typeName = "livekit.proto.DisconnectResponse";
DisconnectResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.DisconnectCallback
 */
export class DisconnectCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DisconnectCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DisconnectCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DisconnectCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DisconnectCallback, a, b);
    }
}
DisconnectCallback.runtime = proto3;
DisconnectCallback.typeName = "livekit.proto.DisconnectCallback";
DisconnectCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Publish a track to the room
 *
 * @generated from message livekit.proto.PublishTrackRequest
 */
export class PublishTrackRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 local_participant_handle = 1;
         */
        this.localParticipantHandle = protoInt64.zero;
        /**
         * @generated from field: uint64 track_handle = 2;
         */
        this.trackHandle = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishTrackRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishTrackRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishTrackRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishTrackRequest, a, b);
    }
}
PublishTrackRequest.runtime = proto3;
PublishTrackRequest.typeName = "livekit.proto.PublishTrackRequest";
PublishTrackRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "track_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "options", kind: "message", T: TrackPublishOptions },
]);
/**
 * @generated from message livekit.proto.PublishTrackResponse
 */
export class PublishTrackResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishTrackResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishTrackResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishTrackResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishTrackResponse, a, b);
    }
}
PublishTrackResponse.runtime = proto3;
PublishTrackResponse.typeName = "livekit.proto.PublishTrackResponse";
PublishTrackResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.PublishTrackCallback
 */
export class PublishTrackCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishTrackCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishTrackCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishTrackCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishTrackCallback, a, b);
    }
}
PublishTrackCallback.runtime = proto3;
PublishTrackCallback.typeName = "livekit.proto.PublishTrackCallback";
PublishTrackCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "publication", kind: "message", T: OwnedTrackPublication },
]);
/**
 * Unpublish a track from the room
 *
 * @generated from message livekit.proto.UnpublishTrackRequest
 */
export class UnpublishTrackRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 local_participant_handle = 1;
         */
        this.localParticipantHandle = protoInt64.zero;
        /**
         * @generated from field: string track_sid = 2;
         */
        this.trackSid = "";
        /**
         * @generated from field: bool stop_on_unpublish = 3;
         */
        this.stopOnUnpublish = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnpublishTrackRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnpublishTrackRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnpublishTrackRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnpublishTrackRequest, a, b);
    }
}
UnpublishTrackRequest.runtime = proto3;
UnpublishTrackRequest.typeName = "livekit.proto.UnpublishTrackRequest";
UnpublishTrackRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stop_on_unpublish", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.proto.UnpublishTrackResponse
 */
export class UnpublishTrackResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnpublishTrackResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnpublishTrackResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnpublishTrackResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnpublishTrackResponse, a, b);
    }
}
UnpublishTrackResponse.runtime = proto3;
UnpublishTrackResponse.typeName = "livekit.proto.UnpublishTrackResponse";
UnpublishTrackResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.UnpublishTrackCallback
 */
export class UnpublishTrackCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnpublishTrackCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnpublishTrackCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnpublishTrackCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnpublishTrackCallback, a, b);
    }
}
UnpublishTrackCallback.runtime = proto3;
UnpublishTrackCallback.typeName = "livekit.proto.UnpublishTrackCallback";
UnpublishTrackCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * Publish data to other participants
 *
 * @generated from message livekit.proto.PublishDataRequest
 */
export class PublishDataRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 local_participant_handle = 1;
         */
        this.localParticipantHandle = protoInt64.zero;
        /**
         * @generated from field: uint64 data_ptr = 2;
         */
        this.dataPtr = protoInt64.zero;
        /**
         * @generated from field: uint64 data_len = 3;
         */
        this.dataLen = protoInt64.zero;
        /**
         * @generated from field: bool reliable = 4;
         */
        this.reliable = false;
        /**
         * @generated from field: repeated string destination_sids = 5 [deprecated = true];
         * @deprecated
         */
        this.destinationSids = [];
        /**
         * @generated from field: repeated string destination_identities = 7;
         */
        this.destinationIdentities = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishDataRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishDataRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishDataRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishDataRequest, a, b);
    }
}
PublishDataRequest.runtime = proto3;
PublishDataRequest.typeName = "livekit.proto.PublishDataRequest";
PublishDataRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "data_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "data_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "reliable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "destination_sids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "destination_identities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message livekit.proto.PublishDataResponse
 */
export class PublishDataResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishDataResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishDataResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishDataResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishDataResponse, a, b);
    }
}
PublishDataResponse.runtime = proto3;
PublishDataResponse.typeName = "livekit.proto.PublishDataResponse";
PublishDataResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.PublishDataCallback
 */
export class PublishDataCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishDataCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishDataCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishDataCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishDataCallback, a, b);
    }
}
PublishDataCallback.runtime = proto3;
PublishDataCallback.typeName = "livekit.proto.PublishDataCallback";
PublishDataCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * Publish transcription messages to room
 *
 * @generated from message livekit.proto.PublishTranscriptionRequest
 */
export class PublishTranscriptionRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 local_participant_handle = 1;
         */
        this.localParticipantHandle = protoInt64.zero;
        /**
         * @generated from field: string participant_identity = 2;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string track_id = 3;
         */
        this.trackId = "";
        /**
         * @generated from field: repeated livekit.proto.TranscriptionSegment segments = 4;
         */
        this.segments = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishTranscriptionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishTranscriptionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishTranscriptionRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishTranscriptionRequest, a, b);
    }
}
PublishTranscriptionRequest.runtime = proto3;
PublishTranscriptionRequest.typeName = "livekit.proto.PublishTranscriptionRequest";
PublishTranscriptionRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "track_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "segments", kind: "message", T: TranscriptionSegment, repeated: true },
]);
/**
 * @generated from message livekit.proto.PublishTranscriptionResponse
 */
export class PublishTranscriptionResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishTranscriptionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishTranscriptionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishTranscriptionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishTranscriptionResponse, a, b);
    }
}
PublishTranscriptionResponse.runtime = proto3;
PublishTranscriptionResponse.typeName = "livekit.proto.PublishTranscriptionResponse";
PublishTranscriptionResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.PublishTranscriptionCallback
 */
export class PublishTranscriptionCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishTranscriptionCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishTranscriptionCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishTranscriptionCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishTranscriptionCallback, a, b);
    }
}
PublishTranscriptionCallback.runtime = proto3;
PublishTranscriptionCallback.typeName = "livekit.proto.PublishTranscriptionCallback";
PublishTranscriptionCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * Publish Sip DTMF messages to other participants
 *
 * @generated from message livekit.proto.PublishSipDtmfRequest
 */
export class PublishSipDtmfRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 local_participant_handle = 1;
         */
        this.localParticipantHandle = protoInt64.zero;
        /**
         * @generated from field: uint32 code = 2;
         */
        this.code = 0;
        /**
         * @generated from field: string digit = 3;
         */
        this.digit = "";
        /**
         * @generated from field: repeated string destination_identities = 4;
         */
        this.destinationIdentities = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishSipDtmfRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishSipDtmfRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishSipDtmfRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishSipDtmfRequest, a, b);
    }
}
PublishSipDtmfRequest.runtime = proto3;
PublishSipDtmfRequest.typeName = "livekit.proto.PublishSipDtmfRequest";
PublishSipDtmfRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "digit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "destination_identities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message livekit.proto.PublishSipDtmfResponse
 */
export class PublishSipDtmfResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishSipDtmfResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishSipDtmfResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishSipDtmfResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishSipDtmfResponse, a, b);
    }
}
PublishSipDtmfResponse.runtime = proto3;
PublishSipDtmfResponse.typeName = "livekit.proto.PublishSipDtmfResponse";
PublishSipDtmfResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.PublishSipDtmfCallback
 */
export class PublishSipDtmfCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublishSipDtmfCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublishSipDtmfCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublishSipDtmfCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PublishSipDtmfCallback, a, b);
    }
}
PublishSipDtmfCallback.runtime = proto3;
PublishSipDtmfCallback.typeName = "livekit.proto.PublishSipDtmfCallback";
PublishSipDtmfCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * Change the local participant's metadata
 *
 * @generated from message livekit.proto.SetLocalMetadataRequest
 */
export class SetLocalMetadataRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 local_participant_handle = 1;
         */
        this.localParticipantHandle = protoInt64.zero;
        /**
         * @generated from field: string metadata = 2;
         */
        this.metadata = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetLocalMetadataRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetLocalMetadataRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetLocalMetadataRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetLocalMetadataRequest, a, b);
    }
}
SetLocalMetadataRequest.runtime = proto3;
SetLocalMetadataRequest.typeName = "livekit.proto.SetLocalMetadataRequest";
SetLocalMetadataRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.SetLocalMetadataResponse
 */
export class SetLocalMetadataResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetLocalMetadataResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetLocalMetadataResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetLocalMetadataResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetLocalMetadataResponse, a, b);
    }
}
SetLocalMetadataResponse.runtime = proto3;
SetLocalMetadataResponse.typeName = "livekit.proto.SetLocalMetadataResponse";
SetLocalMetadataResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.SetLocalMetadataCallback
 */
export class SetLocalMetadataCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetLocalMetadataCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetLocalMetadataCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetLocalMetadataCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetLocalMetadataCallback, a, b);
    }
}
SetLocalMetadataCallback.runtime = proto3;
SetLocalMetadataCallback.typeName = "livekit.proto.SetLocalMetadataCallback";
SetLocalMetadataCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * Change the local participant's attributes
 *
 * @generated from message livekit.proto.SetLocalAttributesRequest
 */
export class SetLocalAttributesRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 local_participant_handle = 1;
         */
        this.localParticipantHandle = protoInt64.zero;
        /**
         * @generated from field: map<string, string> attributes = 2;
         */
        this.attributes = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetLocalAttributesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetLocalAttributesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetLocalAttributesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetLocalAttributesRequest, a, b);
    }
}
SetLocalAttributesRequest.runtime = proto3;
SetLocalAttributesRequest.typeName = "livekit.proto.SetLocalAttributesRequest";
SetLocalAttributesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
]);
/**
 * @generated from message livekit.proto.SetLocalAttributesResponse
 */
export class SetLocalAttributesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetLocalAttributesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetLocalAttributesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetLocalAttributesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetLocalAttributesResponse, a, b);
    }
}
SetLocalAttributesResponse.runtime = proto3;
SetLocalAttributesResponse.typeName = "livekit.proto.SetLocalAttributesResponse";
SetLocalAttributesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.SetLocalAttributesCallback
 */
export class SetLocalAttributesCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetLocalAttributesCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetLocalAttributesCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetLocalAttributesCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetLocalAttributesCallback, a, b);
    }
}
SetLocalAttributesCallback.runtime = proto3;
SetLocalAttributesCallback.typeName = "livekit.proto.SetLocalAttributesCallback";
SetLocalAttributesCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * Change the local participant's name
 *
 * @generated from message livekit.proto.SetLocalNameRequest
 */
export class SetLocalNameRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 local_participant_handle = 1;
         */
        this.localParticipantHandle = protoInt64.zero;
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetLocalNameRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetLocalNameRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetLocalNameRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetLocalNameRequest, a, b);
    }
}
SetLocalNameRequest.runtime = proto3;
SetLocalNameRequest.typeName = "livekit.proto.SetLocalNameRequest";
SetLocalNameRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.SetLocalNameResponse
 */
export class SetLocalNameResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetLocalNameResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetLocalNameResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetLocalNameResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetLocalNameResponse, a, b);
    }
}
SetLocalNameResponse.runtime = proto3;
SetLocalNameResponse.typeName = "livekit.proto.SetLocalNameResponse";
SetLocalNameResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.SetLocalNameCallback
 */
export class SetLocalNameCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetLocalNameCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetLocalNameCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetLocalNameCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetLocalNameCallback, a, b);
    }
}
SetLocalNameCallback.runtime = proto3;
SetLocalNameCallback.typeName = "livekit.proto.SetLocalNameCallback";
SetLocalNameCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * Change the "desire" to subs2ribe to a track
 *
 * @generated from message livekit.proto.SetSubscribedRequest
 */
export class SetSubscribedRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool subscribe = 1;
         */
        this.subscribe = false;
        /**
         * @generated from field: uint64 publication_handle = 2;
         */
        this.publicationHandle = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetSubscribedRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetSubscribedRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetSubscribedRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetSubscribedRequest, a, b);
    }
}
SetSubscribedRequest.runtime = proto3;
SetSubscribedRequest.typeName = "livekit.proto.SetSubscribedRequest";
SetSubscribedRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subscribe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "publication_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.SetSubscribedResponse
 */
export class SetSubscribedResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetSubscribedResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetSubscribedResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetSubscribedResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetSubscribedResponse, a, b);
    }
}
SetSubscribedResponse.runtime = proto3;
SetSubscribedResponse.typeName = "livekit.proto.SetSubscribedResponse";
SetSubscribedResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.GetSessionStatsRequest
 */
export class GetSessionStatsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 room_handle = 1;
         */
        this.roomHandle = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSessionStatsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSessionStatsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSessionStatsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetSessionStatsRequest, a, b);
    }
}
GetSessionStatsRequest.runtime = proto3;
GetSessionStatsRequest.typeName = "livekit.proto.GetSessionStatsRequest";
GetSessionStatsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.GetSessionStatsResponse
 */
export class GetSessionStatsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSessionStatsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSessionStatsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSessionStatsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetSessionStatsResponse, a, b);
    }
}
GetSessionStatsResponse.runtime = proto3;
GetSessionStatsResponse.typeName = "livekit.proto.GetSessionStatsResponse";
GetSessionStatsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.GetSessionStatsCallback
 */
export class GetSessionStatsCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        /**
         * @generated from field: repeated livekit.proto.RtcStats publisher_stats = 3;
         */
        this.publisherStats = [];
        /**
         * @generated from field: repeated livekit.proto.RtcStats subscriber_stats = 4;
         */
        this.subscriberStats = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSessionStatsCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSessionStatsCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSessionStatsCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetSessionStatsCallback, a, b);
    }
}
GetSessionStatsCallback.runtime = proto3;
GetSessionStatsCallback.typeName = "livekit.proto.GetSessionStatsCallback";
GetSessionStatsCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "publisher_stats", kind: "message", T: RtcStats, repeated: true },
    { no: 4, name: "subscriber_stats", kind: "message", T: RtcStats, repeated: true },
]);
/**
 * @generated from message livekit.proto.VideoEncoding
 */
export class VideoEncoding extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 max_bitrate = 1;
         */
        this.maxBitrate = protoInt64.zero;
        /**
         * @generated from field: double max_framerate = 2;
         */
        this.maxFramerate = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoEncoding().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoEncoding().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoEncoding().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoEncoding, a, b);
    }
}
VideoEncoding.runtime = proto3;
VideoEncoding.typeName = "livekit.proto.VideoEncoding";
VideoEncoding.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "max_bitrate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "max_framerate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
/**
 * @generated from message livekit.proto.AudioEncoding
 */
export class AudioEncoding extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 max_bitrate = 1;
         */
        this.maxBitrate = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioEncoding().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioEncoding().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioEncoding().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AudioEncoding, a, b);
    }
}
AudioEncoding.runtime = proto3;
AudioEncoding.typeName = "livekit.proto.AudioEncoding";
AudioEncoding.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "max_bitrate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.TrackPublishOptions
 */
export class TrackPublishOptions extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.VideoCodec video_codec = 3;
         */
        this.videoCodec = VideoCodec.VP8;
        /**
         * @generated from field: bool dtx = 4;
         */
        this.dtx = false;
        /**
         * @generated from field: bool red = 5;
         */
        this.red = false;
        /**
         * @generated from field: bool simulcast = 6;
         */
        this.simulcast = false;
        /**
         * @generated from field: livekit.proto.TrackSource source = 7;
         */
        this.source = TrackSource.SOURCE_UNKNOWN;
        /**
         * @generated from field: string stream = 8;
         */
        this.stream = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackPublishOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackPublishOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackPublishOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackPublishOptions, a, b);
    }
}
TrackPublishOptions.runtime = proto3;
TrackPublishOptions.typeName = "livekit.proto.TrackPublishOptions";
TrackPublishOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "video_encoding", kind: "message", T: VideoEncoding },
    { no: 2, name: "audio_encoding", kind: "message", T: AudioEncoding },
    { no: 3, name: "video_codec", kind: "enum", T: proto3.getEnumType(VideoCodec) },
    { no: 4, name: "dtx", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "red", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "simulcast", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "source", kind: "enum", T: proto3.getEnumType(TrackSource) },
    { no: 8, name: "stream", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.IceServer
 */
export class IceServer extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string urls = 1;
         */
        this.urls = [];
        /**
         * @generated from field: string username = 2;
         */
        this.username = "";
        /**
         * @generated from field: string password = 3;
         */
        this.password = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IceServer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IceServer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IceServer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IceServer, a, b);
    }
}
IceServer.runtime = proto3;
IceServer.typeName = "livekit.proto.IceServer";
IceServer.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.RtcConfig
 */
export class RtcConfig extends Message {
    constructor(data) {
        super();
        /**
         * empty fallback to default
         *
         * @generated from field: repeated livekit.proto.IceServer ice_servers = 3;
         */
        this.iceServers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RtcConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RtcConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RtcConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RtcConfig, a, b);
    }
}
RtcConfig.runtime = proto3;
RtcConfig.typeName = "livekit.proto.RtcConfig";
RtcConfig.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "ice_transport_type", kind: "enum", T: proto3.getEnumType(IceTransportType), opt: true },
    { no: 2, name: "continual_gathering_policy", kind: "enum", T: proto3.getEnumType(ContinualGatheringPolicy), opt: true },
    { no: 3, name: "ice_servers", kind: "message", T: IceServer, repeated: true },
]);
/**
 * @generated from message livekit.proto.RoomOptions
 */
export class RoomOptions extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool auto_subscribe = 1;
         */
        this.autoSubscribe = false;
        /**
         * @generated from field: bool adaptive_stream = 2;
         */
        this.adaptiveStream = false;
        /**
         * @generated from field: bool dynacast = 3;
         */
        this.dynacast = false;
        /**
         * @generated from field: uint32 join_retries = 6;
         */
        this.joinRetries = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoomOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoomOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoomOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RoomOptions, a, b);
    }
}
RoomOptions.runtime = proto3;
RoomOptions.typeName = "livekit.proto.RoomOptions";
RoomOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "auto_subscribe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "adaptive_stream", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "dynacast", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "e2ee", kind: "message", T: E2eeOptions, opt: true },
    { no: 5, name: "rtc_config", kind: "message", T: RtcConfig, opt: true },
    { no: 6, name: "join_retries", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message livekit.proto.TranscriptionSegment
 */
export class TranscriptionSegment extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * @generated from field: string text = 2;
         */
        this.text = "";
        /**
         * @generated from field: uint64 start_time = 3;
         */
        this.startTime = protoInt64.zero;
        /**
         * @generated from field: uint64 end_time = 4;
         */
        this.endTime = protoInt64.zero;
        /**
         * @generated from field: bool final = 5;
         */
        this.final = false;
        /**
         * @generated from field: string language = 6;
         */
        this.language = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TranscriptionSegment().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TranscriptionSegment().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TranscriptionSegment().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TranscriptionSegment, a, b);
    }
}
TranscriptionSegment.runtime = proto3;
TranscriptionSegment.typeName = "livekit.proto.TranscriptionSegment";
TranscriptionSegment.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "end_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "final", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.BufferInfo
 */
export class BufferInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 data_ptr = 1;
         */
        this.dataPtr = protoInt64.zero;
        /**
         * @generated from field: uint64 data_len = 2;
         */
        this.dataLen = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BufferInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BufferInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BufferInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BufferInfo, a, b);
    }
}
BufferInfo.runtime = proto3;
BufferInfo.typeName = "livekit.proto.BufferInfo";
BufferInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "data_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.OwnedBuffer
 */
export class OwnedBuffer extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OwnedBuffer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OwnedBuffer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OwnedBuffer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OwnedBuffer, a, b);
    }
}
OwnedBuffer.runtime = proto3;
OwnedBuffer.typeName = "livekit.proto.OwnedBuffer";
OwnedBuffer.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "data", kind: "message", T: BufferInfo },
]);
/**
 * @generated from message livekit.proto.RoomEvent
 */
export class RoomEvent extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 room_handle = 1;
         */
        this.roomHandle = protoInt64.zero;
        /**
         * @generated from oneof livekit.proto.RoomEvent.message
         */
        this.message = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoomEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoomEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoomEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RoomEvent, a, b);
    }
}
RoomEvent.runtime = proto3;
RoomEvent.typeName = "livekit.proto.RoomEvent";
RoomEvent.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "participant_connected", kind: "message", T: ParticipantConnected, oneof: "message" },
    { no: 3, name: "participant_disconnected", kind: "message", T: ParticipantDisconnected, oneof: "message" },
    { no: 4, name: "local_track_published", kind: "message", T: LocalTrackPublished, oneof: "message" },
    { no: 5, name: "local_track_unpublished", kind: "message", T: LocalTrackUnpublished, oneof: "message" },
    { no: 6, name: "local_track_subscribed", kind: "message", T: LocalTrackSubscribed, oneof: "message" },
    { no: 7, name: "track_published", kind: "message", T: TrackPublished, oneof: "message" },
    { no: 8, name: "track_unpublished", kind: "message", T: TrackUnpublished, oneof: "message" },
    { no: 9, name: "track_subscribed", kind: "message", T: TrackSubscribed, oneof: "message" },
    { no: 10, name: "track_unsubscribed", kind: "message", T: TrackUnsubscribed, oneof: "message" },
    { no: 11, name: "track_subscription_failed", kind: "message", T: TrackSubscriptionFailed, oneof: "message" },
    { no: 12, name: "track_muted", kind: "message", T: TrackMuted, oneof: "message" },
    { no: 13, name: "track_unmuted", kind: "message", T: TrackUnmuted, oneof: "message" },
    { no: 14, name: "active_speakers_changed", kind: "message", T: ActiveSpeakersChanged, oneof: "message" },
    { no: 15, name: "room_metadata_changed", kind: "message", T: RoomMetadataChanged, oneof: "message" },
    { no: 16, name: "room_sid_changed", kind: "message", T: RoomSidChanged, oneof: "message" },
    { no: 17, name: "participant_metadata_changed", kind: "message", T: ParticipantMetadataChanged, oneof: "message" },
    { no: 18, name: "participant_name_changed", kind: "message", T: ParticipantNameChanged, oneof: "message" },
    { no: 19, name: "participant_attributes_changed", kind: "message", T: ParticipantAttributesChanged, oneof: "message" },
    { no: 20, name: "connection_quality_changed", kind: "message", T: ConnectionQualityChanged, oneof: "message" },
    { no: 21, name: "connection_state_changed", kind: "message", T: ConnectionStateChanged, oneof: "message" },
    { no: 22, name: "disconnected", kind: "message", T: Disconnected, oneof: "message" },
    { no: 23, name: "reconnecting", kind: "message", T: Reconnecting, oneof: "message" },
    { no: 24, name: "reconnected", kind: "message", T: Reconnected, oneof: "message" },
    { no: 25, name: "e2ee_state_changed", kind: "message", T: E2eeStateChanged, oneof: "message" },
    { no: 26, name: "eos", kind: "message", T: RoomEOS, oneof: "message" },
    { no: 27, name: "data_packet_received", kind: "message", T: DataPacketReceived, oneof: "message" },
    { no: 28, name: "transcription_received", kind: "message", T: TranscriptionReceived, oneof: "message" },
]);
/**
 * @generated from message livekit.proto.RoomInfo
 */
export class RoomInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: string metadata = 3;
         */
        this.metadata = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoomInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoomInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoomInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RoomInfo, a, b);
    }
}
RoomInfo.runtime = proto3;
RoomInfo.typeName = "livekit.proto.RoomInfo";
RoomInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.OwnedRoom
 */
export class OwnedRoom extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OwnedRoom().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OwnedRoom().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OwnedRoom().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OwnedRoom, a, b);
    }
}
OwnedRoom.runtime = proto3;
OwnedRoom.typeName = "livekit.proto.OwnedRoom";
OwnedRoom.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: RoomInfo },
]);
/**
 * @generated from message livekit.proto.ParticipantConnected
 */
export class ParticipantConnected extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParticipantConnected().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParticipantConnected().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParticipantConnected().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParticipantConnected, a, b);
    }
}
ParticipantConnected.runtime = proto3;
ParticipantConnected.typeName = "livekit.proto.ParticipantConnected";
ParticipantConnected.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: OwnedParticipant },
]);
/**
 * @generated from message livekit.proto.ParticipantDisconnected
 */
export class ParticipantDisconnected extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParticipantDisconnected().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParticipantDisconnected().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParticipantDisconnected().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParticipantDisconnected, a, b);
    }
}
ParticipantDisconnected.runtime = proto3;
ParticipantDisconnected.typeName = "livekit.proto.ParticipantDisconnected";
ParticipantDisconnected.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.LocalTrackPublished
 */
export class LocalTrackPublished extends Message {
    constructor(data) {
        super();
        /**
         * The TrackPublicationInfo comes from the PublishTrack response
         * and the FfiClient musts wait for it before firing this event
         *
         * @generated from field: string track_sid = 1;
         */
        this.trackSid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LocalTrackPublished().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LocalTrackPublished().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LocalTrackPublished().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LocalTrackPublished, a, b);
    }
}
LocalTrackPublished.runtime = proto3;
LocalTrackPublished.typeName = "livekit.proto.LocalTrackPublished";
LocalTrackPublished.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.LocalTrackUnpublished
 */
export class LocalTrackUnpublished extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string publication_sid = 1;
         */
        this.publicationSid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LocalTrackUnpublished().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LocalTrackUnpublished().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LocalTrackUnpublished().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LocalTrackUnpublished, a, b);
    }
}
LocalTrackUnpublished.runtime = proto3;
LocalTrackUnpublished.typeName = "livekit.proto.LocalTrackUnpublished";
LocalTrackUnpublished.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "publication_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.LocalTrackSubscribed
 */
export class LocalTrackSubscribed extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string track_sid = 2;
         */
        this.trackSid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LocalTrackSubscribed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LocalTrackSubscribed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LocalTrackSubscribed().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LocalTrackSubscribed, a, b);
    }
}
LocalTrackSubscribed.runtime = proto3;
LocalTrackSubscribed.typeName = "livekit.proto.LocalTrackSubscribed";
LocalTrackSubscribed.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.TrackPublished
 */
export class TrackPublished extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackPublished().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackPublished().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackPublished().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackPublished, a, b);
    }
}
TrackPublished.runtime = proto3;
TrackPublished.typeName = "livekit.proto.TrackPublished";
TrackPublished.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "publication", kind: "message", T: OwnedTrackPublication },
]);
/**
 * @generated from message livekit.proto.TrackUnpublished
 */
export class TrackUnpublished extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string publication_sid = 2;
         */
        this.publicationSid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackUnpublished().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackUnpublished().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackUnpublished().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackUnpublished, a, b);
    }
}
TrackUnpublished.runtime = proto3;
TrackUnpublished.typeName = "livekit.proto.TrackUnpublished";
TrackUnpublished.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "publication_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Publication isn't needed for subscription events on the FFI
 * The FFI will retrieve the publication using the Track sid
 *
 * @generated from message livekit.proto.TrackSubscribed
 */
export class TrackSubscribed extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackSubscribed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackSubscribed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackSubscribed().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackSubscribed, a, b);
    }
}
TrackSubscribed.runtime = proto3;
TrackSubscribed.typeName = "livekit.proto.TrackSubscribed";
TrackSubscribed.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track", kind: "message", T: OwnedTrack },
]);
/**
 * @generated from message livekit.proto.TrackUnsubscribed
 */
export class TrackUnsubscribed extends Message {
    constructor(data) {
        super();
        /**
         * The FFI language can dispose/remove the VideoSink here
         *
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string track_sid = 2;
         */
        this.trackSid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackUnsubscribed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackUnsubscribed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackUnsubscribed().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackUnsubscribed, a, b);
    }
}
TrackUnsubscribed.runtime = proto3;
TrackUnsubscribed.typeName = "livekit.proto.TrackUnsubscribed";
TrackUnsubscribed.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.TrackSubscriptionFailed
 */
export class TrackSubscriptionFailed extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string track_sid = 2;
         */
        this.trackSid = "";
        /**
         * @generated from field: string error = 3;
         */
        this.error = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackSubscriptionFailed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackSubscriptionFailed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackSubscriptionFailed().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackSubscriptionFailed, a, b);
    }
}
TrackSubscriptionFailed.runtime = proto3;
TrackSubscriptionFailed.typeName = "livekit.proto.TrackSubscriptionFailed";
TrackSubscriptionFailed.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.TrackMuted
 */
export class TrackMuted extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string track_sid = 2;
         */
        this.trackSid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackMuted().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackMuted().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackMuted().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackMuted, a, b);
    }
}
TrackMuted.runtime = proto3;
TrackMuted.typeName = "livekit.proto.TrackMuted";
TrackMuted.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.TrackUnmuted
 */
export class TrackUnmuted extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string track_sid = 2;
         */
        this.trackSid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TrackUnmuted().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TrackUnmuted().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TrackUnmuted().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TrackUnmuted, a, b);
    }
}
TrackUnmuted.runtime = proto3;
TrackUnmuted.typeName = "livekit.proto.TrackUnmuted";
TrackUnmuted.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.E2eeStateChanged
 */
export class E2eeStateChanged extends Message {
    constructor(data) {
        super();
        /**
         * Using sid instead of identity for ffi communication
         *
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: livekit.proto.EncryptionState state = 2;
         */
        this.state = EncryptionState.NEW;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new E2eeStateChanged().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new E2eeStateChanged().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new E2eeStateChanged().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(E2eeStateChanged, a, b);
    }
}
E2eeStateChanged.runtime = proto3;
E2eeStateChanged.typeName = "livekit.proto.E2eeStateChanged";
E2eeStateChanged.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(EncryptionState) },
]);
/**
 * @generated from message livekit.proto.ActiveSpeakersChanged
 */
export class ActiveSpeakersChanged extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string participant_identities = 1;
         */
        this.participantIdentities = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveSpeakersChanged().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveSpeakersChanged().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveSpeakersChanged().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ActiveSpeakersChanged, a, b);
    }
}
ActiveSpeakersChanged.runtime = proto3;
ActiveSpeakersChanged.typeName = "livekit.proto.ActiveSpeakersChanged";
ActiveSpeakersChanged.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message livekit.proto.RoomMetadataChanged
 */
export class RoomMetadataChanged extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string metadata = 1;
         */
        this.metadata = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoomMetadataChanged().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoomMetadataChanged().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoomMetadataChanged().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RoomMetadataChanged, a, b);
    }
}
RoomMetadataChanged.runtime = proto3;
RoomMetadataChanged.typeName = "livekit.proto.RoomMetadataChanged";
RoomMetadataChanged.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.RoomSidChanged
 */
export class RoomSidChanged extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sid = 1;
         */
        this.sid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoomSidChanged().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoomSidChanged().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoomSidChanged().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RoomSidChanged, a, b);
    }
}
RoomSidChanged.runtime = proto3;
RoomSidChanged.typeName = "livekit.proto.RoomSidChanged";
RoomSidChanged.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.ParticipantMetadataChanged
 */
export class ParticipantMetadataChanged extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string metadata = 2;
         */
        this.metadata = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParticipantMetadataChanged().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParticipantMetadataChanged().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParticipantMetadataChanged().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParticipantMetadataChanged, a, b);
    }
}
ParticipantMetadataChanged.runtime = proto3;
ParticipantMetadataChanged.typeName = "livekit.proto.ParticipantMetadataChanged";
ParticipantMetadataChanged.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.ParticipantAttributesChanged
 */
export class ParticipantAttributesChanged extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: map<string, string> attributes = 2;
         */
        this.attributes = {};
        /**
         * @generated from field: map<string, string> changed_attributes = 3;
         */
        this.changedAttributes = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParticipantAttributesChanged().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParticipantAttributesChanged().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParticipantAttributesChanged().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParticipantAttributesChanged, a, b);
    }
}
ParticipantAttributesChanged.runtime = proto3;
ParticipantAttributesChanged.typeName = "livekit.proto.ParticipantAttributesChanged";
ParticipantAttributesChanged.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
    { no: 3, name: "changed_attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
]);
/**
 * @generated from message livekit.proto.ParticipantNameChanged
 */
export class ParticipantNameChanged extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParticipantNameChanged().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParticipantNameChanged().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParticipantNameChanged().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParticipantNameChanged, a, b);
    }
}
ParticipantNameChanged.runtime = proto3;
ParticipantNameChanged.typeName = "livekit.proto.ParticipantNameChanged";
ParticipantNameChanged.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.ConnectionQualityChanged
 */
export class ConnectionQualityChanged extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string participant_identity = 1;
         */
        this.participantIdentity = "";
        /**
         * @generated from field: livekit.proto.ConnectionQuality quality = 2;
         */
        this.quality = ConnectionQuality.QUALITY_POOR;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConnectionQualityChanged().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConnectionQualityChanged().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConnectionQualityChanged().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConnectionQualityChanged, a, b);
    }
}
ConnectionQualityChanged.runtime = proto3;
ConnectionQualityChanged.typeName = "livekit.proto.ConnectionQualityChanged";
ConnectionQualityChanged.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quality", kind: "enum", T: proto3.getEnumType(ConnectionQuality) },
]);
/**
 * @generated from message livekit.proto.UserPacket
 */
export class UserPacket extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserPacket().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserPacket().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserPacket().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserPacket, a, b);
    }
}
UserPacket.runtime = proto3;
UserPacket.typeName = "livekit.proto.UserPacket";
UserPacket.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: OwnedBuffer },
    { no: 2, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message livekit.proto.SipDTMF
 */
export class SipDTMF extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 code = 1;
         */
        this.code = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SipDTMF().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SipDTMF().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SipDTMF().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SipDTMF, a, b);
    }
}
SipDTMF.runtime = proto3;
SipDTMF.typeName = "livekit.proto.SipDTMF";
SipDTMF.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "digit", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message livekit.proto.DataPacketReceived
 */
export class DataPacketReceived extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.DataPacketKind kind = 1;
         */
        this.kind = DataPacketKind.KIND_LOSSY;
        /**
         * Can be empty if the data is sent a server SDK
         *
         * @generated from field: string participant_identity = 2;
         */
        this.participantIdentity = "";
        /**
         * @generated from oneof livekit.proto.DataPacketReceived.value
         */
        this.value = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DataPacketReceived().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DataPacketReceived().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DataPacketReceived().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DataPacketReceived, a, b);
    }
}
DataPacketReceived.runtime = proto3;
DataPacketReceived.typeName = "livekit.proto.DataPacketReceived";
DataPacketReceived.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(DataPacketKind) },
    { no: 2, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user", kind: "message", T: UserPacket, oneof: "value" },
    { no: 5, name: "sip_dtmf", kind: "message", T: SipDTMF, oneof: "value" },
]);
/**
 * @generated from message livekit.proto.TranscriptionReceived
 */
export class TranscriptionReceived extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated livekit.proto.TranscriptionSegment segments = 3;
         */
        this.segments = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TranscriptionReceived().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TranscriptionReceived().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TranscriptionReceived().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TranscriptionReceived, a, b);
    }
}
TranscriptionReceived.runtime = proto3;
TranscriptionReceived.typeName = "livekit.proto.TranscriptionReceived";
TranscriptionReceived.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "segments", kind: "message", T: TranscriptionSegment, repeated: true },
]);
/**
 * @generated from message livekit.proto.ConnectionStateChanged
 */
export class ConnectionStateChanged extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.ConnectionState state = 1;
         */
        this.state = ConnectionState.CONN_DISCONNECTED;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConnectionStateChanged().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConnectionStateChanged().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConnectionStateChanged().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConnectionStateChanged, a, b);
    }
}
ConnectionStateChanged.runtime = proto3;
ConnectionStateChanged.typeName = "livekit.proto.ConnectionStateChanged";
ConnectionStateChanged.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(ConnectionState) },
]);
/**
 * @generated from message livekit.proto.Connected
 */
export class Connected extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Connected().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Connected().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Connected().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Connected, a, b);
    }
}
Connected.runtime = proto3;
Connected.typeName = "livekit.proto.Connected";
Connected.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.Disconnected
 */
export class Disconnected extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.DisconnectReason reason = 1;
         */
        this.reason = DisconnectReason.UNKNOWN_REASON;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Disconnected().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Disconnected().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Disconnected().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Disconnected, a, b);
    }
}
Disconnected.runtime = proto3;
Disconnected.typeName = "livekit.proto.Disconnected";
Disconnected.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "reason", kind: "enum", T: proto3.getEnumType(DisconnectReason) },
]);
/**
 * @generated from message livekit.proto.Reconnecting
 */
export class Reconnecting extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Reconnecting().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Reconnecting().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Reconnecting().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Reconnecting, a, b);
    }
}
Reconnecting.runtime = proto3;
Reconnecting.typeName = "livekit.proto.Reconnecting";
Reconnecting.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.Reconnected
 */
export class Reconnected extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Reconnected().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Reconnected().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Reconnected().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Reconnected, a, b);
    }
}
Reconnected.runtime = proto3;
Reconnected.typeName = "livekit.proto.Reconnected";
Reconnected.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.RoomEOS
 */
export class RoomEOS extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoomEOS().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoomEOS().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoomEOS().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RoomEOS, a, b);
    }
}
RoomEOS.runtime = proto3;
RoomEOS.typeName = "livekit.proto.RoomEOS";
RoomEOS.fields = proto3.util.newFieldList(() => []);
//# sourceMappingURL=room_pb.js.map