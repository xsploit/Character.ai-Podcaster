// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FfiOwnedHandle } from "./handle_pb.js";
/**
 * @generated from enum livekit.proto.VideoCodec
 */
export var VideoCodec;
(function (VideoCodec) {
    /**
     * @generated from enum value: VP8 = 0;
     */
    VideoCodec[VideoCodec["VP8"] = 0] = "VP8";
    /**
     * @generated from enum value: H264 = 1;
     */
    VideoCodec[VideoCodec["H264"] = 1] = "H264";
    /**
     * @generated from enum value: AV1 = 2;
     */
    VideoCodec[VideoCodec["AV1"] = 2] = "AV1";
    /**
     * @generated from enum value: VP9 = 3;
     */
    VideoCodec[VideoCodec["VP9"] = 3] = "VP9";
})(VideoCodec || (VideoCodec = {}));
// Retrieve enum metadata with: proto3.getEnumType(VideoCodec)
proto3.util.setEnumType(VideoCodec, "livekit.proto.VideoCodec", [
    { no: 0, name: "VP8" },
    { no: 1, name: "H264" },
    { no: 2, name: "AV1" },
    { no: 3, name: "VP9" },
]);
/**
 * @generated from enum livekit.proto.VideoRotation
 */
export var VideoRotation;
(function (VideoRotation) {
    /**
     * @generated from enum value: VIDEO_ROTATION_0 = 0;
     */
    VideoRotation[VideoRotation["VIDEO_ROTATION_0"] = 0] = "VIDEO_ROTATION_0";
    /**
     * @generated from enum value: VIDEO_ROTATION_90 = 1;
     */
    VideoRotation[VideoRotation["VIDEO_ROTATION_90"] = 1] = "VIDEO_ROTATION_90";
    /**
     * @generated from enum value: VIDEO_ROTATION_180 = 2;
     */
    VideoRotation[VideoRotation["VIDEO_ROTATION_180"] = 2] = "VIDEO_ROTATION_180";
    /**
     * @generated from enum value: VIDEO_ROTATION_270 = 3;
     */
    VideoRotation[VideoRotation["VIDEO_ROTATION_270"] = 3] = "VIDEO_ROTATION_270";
})(VideoRotation || (VideoRotation = {}));
// Retrieve enum metadata with: proto3.getEnumType(VideoRotation)
proto3.util.setEnumType(VideoRotation, "livekit.proto.VideoRotation", [
    { no: 0, name: "VIDEO_ROTATION_0" },
    { no: 1, name: "VIDEO_ROTATION_90" },
    { no: 2, name: "VIDEO_ROTATION_180" },
    { no: 3, name: "VIDEO_ROTATION_270" },
]);
/**
 * @generated from enum livekit.proto.VideoBufferType
 */
export var VideoBufferType;
(function (VideoBufferType) {
    /**
     * @generated from enum value: RGBA = 0;
     */
    VideoBufferType[VideoBufferType["RGBA"] = 0] = "RGBA";
    /**
     * @generated from enum value: ABGR = 1;
     */
    VideoBufferType[VideoBufferType["ABGR"] = 1] = "ABGR";
    /**
     * @generated from enum value: ARGB = 2;
     */
    VideoBufferType[VideoBufferType["ARGB"] = 2] = "ARGB";
    /**
     * @generated from enum value: BGRA = 3;
     */
    VideoBufferType[VideoBufferType["BGRA"] = 3] = "BGRA";
    /**
     * @generated from enum value: RGB24 = 4;
     */
    VideoBufferType[VideoBufferType["RGB24"] = 4] = "RGB24";
    /**
     * @generated from enum value: I420 = 5;
     */
    VideoBufferType[VideoBufferType["I420"] = 5] = "I420";
    /**
     * @generated from enum value: I420A = 6;
     */
    VideoBufferType[VideoBufferType["I420A"] = 6] = "I420A";
    /**
     * @generated from enum value: I422 = 7;
     */
    VideoBufferType[VideoBufferType["I422"] = 7] = "I422";
    /**
     * @generated from enum value: I444 = 8;
     */
    VideoBufferType[VideoBufferType["I444"] = 8] = "I444";
    /**
     * @generated from enum value: I010 = 9;
     */
    VideoBufferType[VideoBufferType["I010"] = 9] = "I010";
    /**
     * @generated from enum value: NV12 = 10;
     */
    VideoBufferType[VideoBufferType["NV12"] = 10] = "NV12";
})(VideoBufferType || (VideoBufferType = {}));
// Retrieve enum metadata with: proto3.getEnumType(VideoBufferType)
proto3.util.setEnumType(VideoBufferType, "livekit.proto.VideoBufferType", [
    { no: 0, name: "RGBA" },
    { no: 1, name: "ABGR" },
    { no: 2, name: "ARGB" },
    { no: 3, name: "BGRA" },
    { no: 4, name: "RGB24" },
    { no: 5, name: "I420" },
    { no: 6, name: "I420A" },
    { no: 7, name: "I422" },
    { no: 8, name: "I444" },
    { no: 9, name: "I010" },
    { no: 10, name: "NV12" },
]);
/**
 * @generated from enum livekit.proto.VideoStreamType
 */
export var VideoStreamType;
(function (VideoStreamType) {
    /**
     * @generated from enum value: VIDEO_STREAM_NATIVE = 0;
     */
    VideoStreamType[VideoStreamType["VIDEO_STREAM_NATIVE"] = 0] = "VIDEO_STREAM_NATIVE";
    /**
     * @generated from enum value: VIDEO_STREAM_WEBGL = 1;
     */
    VideoStreamType[VideoStreamType["VIDEO_STREAM_WEBGL"] = 1] = "VIDEO_STREAM_WEBGL";
    /**
     * @generated from enum value: VIDEO_STREAM_HTML = 2;
     */
    VideoStreamType[VideoStreamType["VIDEO_STREAM_HTML"] = 2] = "VIDEO_STREAM_HTML";
})(VideoStreamType || (VideoStreamType = {}));
// Retrieve enum metadata with: proto3.getEnumType(VideoStreamType)
proto3.util.setEnumType(VideoStreamType, "livekit.proto.VideoStreamType", [
    { no: 0, name: "VIDEO_STREAM_NATIVE" },
    { no: 1, name: "VIDEO_STREAM_WEBGL" },
    { no: 2, name: "VIDEO_STREAM_HTML" },
]);
/**
 * @generated from enum livekit.proto.VideoSourceType
 */
export var VideoSourceType;
(function (VideoSourceType) {
    /**
     * @generated from enum value: VIDEO_SOURCE_NATIVE = 0;
     */
    VideoSourceType[VideoSourceType["VIDEO_SOURCE_NATIVE"] = 0] = "VIDEO_SOURCE_NATIVE";
})(VideoSourceType || (VideoSourceType = {}));
// Retrieve enum metadata with: proto3.getEnumType(VideoSourceType)
proto3.util.setEnumType(VideoSourceType, "livekit.proto.VideoSourceType", [
    { no: 0, name: "VIDEO_SOURCE_NATIVE" },
]);
/**
 * Create a new VideoStream
 * VideoStream is used to receive video frames from a track
 *
 * @generated from message livekit.proto.NewVideoStreamRequest
 */
export class NewVideoStreamRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 track_handle = 1;
         */
        this.trackHandle = protoInt64.zero;
        /**
         * @generated from field: livekit.proto.VideoStreamType type = 2;
         */
        this.type = VideoStreamType.VIDEO_STREAM_NATIVE;
        /**
         * if true, stride will be set to width/chroma_width
         *
         * @generated from field: bool normalize_stride = 4;
         */
        this.normalizeStride = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NewVideoStreamRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NewVideoStreamRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NewVideoStreamRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NewVideoStreamRequest, a, b);
    }
}
NewVideoStreamRequest.runtime = proto3;
NewVideoStreamRequest.typeName = "livekit.proto.NewVideoStreamRequest";
NewVideoStreamRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "track_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(VideoStreamType) },
    { no: 3, name: "format", kind: "enum", T: proto3.getEnumType(VideoBufferType), opt: true },
    { no: 4, name: "normalize_stride", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.proto.NewVideoStreamResponse
 */
export class NewVideoStreamResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NewVideoStreamResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NewVideoStreamResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NewVideoStreamResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NewVideoStreamResponse, a, b);
    }
}
NewVideoStreamResponse.runtime = proto3;
NewVideoStreamResponse.typeName = "livekit.proto.NewVideoStreamResponse";
NewVideoStreamResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "stream", kind: "message", T: OwnedVideoStream },
]);
/**
 * Create a new VideoSource
 * VideoSource is used to send video frame to a track
 *
 * @generated from message livekit.proto.NewVideoSourceRequest
 */
export class NewVideoSourceRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.VideoSourceType type = 1;
         */
        this.type = VideoSourceType.VIDEO_SOURCE_NATIVE;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NewVideoSourceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NewVideoSourceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NewVideoSourceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NewVideoSourceRequest, a, b);
    }
}
NewVideoSourceRequest.runtime = proto3;
NewVideoSourceRequest.typeName = "livekit.proto.NewVideoSourceRequest";
NewVideoSourceRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(VideoSourceType) },
    { no: 2, name: "resolution", kind: "message", T: VideoSourceResolution },
]);
/**
 * @generated from message livekit.proto.NewVideoSourceResponse
 */
export class NewVideoSourceResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NewVideoSourceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NewVideoSourceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NewVideoSourceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NewVideoSourceResponse, a, b);
    }
}
NewVideoSourceResponse.runtime = proto3;
NewVideoSourceResponse.typeName = "livekit.proto.NewVideoSourceResponse";
NewVideoSourceResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "message", T: OwnedVideoSource },
]);
/**
 * Push a frame to a VideoSource
 *
 * @generated from message livekit.proto.CaptureVideoFrameRequest
 */
export class CaptureVideoFrameRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 source_handle = 1;
         */
        this.sourceHandle = protoInt64.zero;
        /**
         * In microseconds
         *
         * @generated from field: int64 timestamp_us = 3;
         */
        this.timestampUs = protoInt64.zero;
        /**
         * @generated from field: livekit.proto.VideoRotation rotation = 4;
         */
        this.rotation = VideoRotation.VIDEO_ROTATION_0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CaptureVideoFrameRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CaptureVideoFrameRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CaptureVideoFrameRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CaptureVideoFrameRequest, a, b);
    }
}
CaptureVideoFrameRequest.runtime = proto3;
CaptureVideoFrameRequest.typeName = "livekit.proto.CaptureVideoFrameRequest";
CaptureVideoFrameRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "source_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "buffer", kind: "message", T: VideoBufferInfo },
    { no: 3, name: "timestamp_us", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "rotation", kind: "enum", T: proto3.getEnumType(VideoRotation) },
]);
/**
 * @generated from message livekit.proto.CaptureVideoFrameResponse
 */
export class CaptureVideoFrameResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CaptureVideoFrameResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CaptureVideoFrameResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CaptureVideoFrameResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CaptureVideoFrameResponse, a, b);
    }
}
CaptureVideoFrameResponse.runtime = proto3;
CaptureVideoFrameResponse.typeName = "livekit.proto.CaptureVideoFrameResponse";
CaptureVideoFrameResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.VideoConvertRequest
 */
export class VideoConvertRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool flip_y = 1;
         */
        this.flipY = false;
        /**
         * @generated from field: livekit.proto.VideoBufferType dst_type = 3;
         */
        this.dstType = VideoBufferType.RGBA;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoConvertRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoConvertRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoConvertRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoConvertRequest, a, b);
    }
}
VideoConvertRequest.runtime = proto3;
VideoConvertRequest.typeName = "livekit.proto.VideoConvertRequest";
VideoConvertRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "flip_y", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "buffer", kind: "message", T: VideoBufferInfo },
    { no: 3, name: "dst_type", kind: "enum", T: proto3.getEnumType(VideoBufferType) },
]);
/**
 * @generated from message livekit.proto.VideoConvertResponse
 */
export class VideoConvertResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoConvertResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoConvertResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoConvertResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoConvertResponse, a, b);
    }
}
VideoConvertResponse.runtime = proto3;
VideoConvertResponse.typeName = "livekit.proto.VideoConvertResponse";
VideoConvertResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "buffer", kind: "message", T: OwnedVideoBuffer },
]);
/**
 * @generated from message livekit.proto.VideoResolution
 */
export class VideoResolution extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 width = 1;
         */
        this.width = 0;
        /**
         * @generated from field: uint32 height = 2;
         */
        this.height = 0;
        /**
         * @generated from field: double frame_rate = 3;
         */
        this.frameRate = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoResolution().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoResolution().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoResolution().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoResolution, a, b);
    }
}
VideoResolution.runtime = proto3;
VideoResolution.typeName = "livekit.proto.VideoResolution";
VideoResolution.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "frame_rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
/**
 * @generated from message livekit.proto.VideoBufferInfo
 */
export class VideoBufferInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.VideoBufferType type = 1;
         */
        this.type = VideoBufferType.RGBA;
        /**
         * @generated from field: uint32 width = 2;
         */
        this.width = 0;
        /**
         * @generated from field: uint32 height = 3;
         */
        this.height = 0;
        /**
         * @generated from field: uint64 data_ptr = 4;
         */
        this.dataPtr = protoInt64.zero;
        /**
         * only for packed formats
         *
         * @generated from field: uint32 stride = 6;
         */
        this.stride = 0;
        /**
         * @generated from field: repeated livekit.proto.VideoBufferInfo.ComponentInfo components = 7;
         */
        this.components = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoBufferInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoBufferInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoBufferInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoBufferInfo, a, b);
    }
}
VideoBufferInfo.runtime = proto3;
VideoBufferInfo.typeName = "livekit.proto.VideoBufferInfo";
VideoBufferInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(VideoBufferType) },
    { no: 2, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "data_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "stride", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "components", kind: "message", T: VideoBufferInfo_ComponentInfo, repeated: true },
]);
/**
 * @generated from message livekit.proto.VideoBufferInfo.ComponentInfo
 */
export class VideoBufferInfo_ComponentInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 data_ptr = 1;
         */
        this.dataPtr = protoInt64.zero;
        /**
         * @generated from field: uint32 stride = 2;
         */
        this.stride = 0;
        /**
         * @generated from field: uint32 size = 3;
         */
        this.size = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoBufferInfo_ComponentInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoBufferInfo_ComponentInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoBufferInfo_ComponentInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoBufferInfo_ComponentInfo, a, b);
    }
}
VideoBufferInfo_ComponentInfo.runtime = proto3;
VideoBufferInfo_ComponentInfo.typeName = "livekit.proto.VideoBufferInfo.ComponentInfo";
VideoBufferInfo_ComponentInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "stride", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message livekit.proto.OwnedVideoBuffer
 */
export class OwnedVideoBuffer extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OwnedVideoBuffer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OwnedVideoBuffer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OwnedVideoBuffer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OwnedVideoBuffer, a, b);
    }
}
OwnedVideoBuffer.runtime = proto3;
OwnedVideoBuffer.typeName = "livekit.proto.OwnedVideoBuffer";
OwnedVideoBuffer.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: VideoBufferInfo },
]);
/**
 * @generated from message livekit.proto.VideoStreamInfo
 */
export class VideoStreamInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.VideoStreamType type = 1;
         */
        this.type = VideoStreamType.VIDEO_STREAM_NATIVE;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoStreamInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoStreamInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoStreamInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoStreamInfo, a, b);
    }
}
VideoStreamInfo.runtime = proto3;
VideoStreamInfo.typeName = "livekit.proto.VideoStreamInfo";
VideoStreamInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(VideoStreamType) },
]);
/**
 * @generated from message livekit.proto.OwnedVideoStream
 */
export class OwnedVideoStream extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OwnedVideoStream().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OwnedVideoStream().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OwnedVideoStream().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OwnedVideoStream, a, b);
    }
}
OwnedVideoStream.runtime = proto3;
OwnedVideoStream.typeName = "livekit.proto.OwnedVideoStream";
OwnedVideoStream.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: VideoStreamInfo },
]);
/**
 * @generated from message livekit.proto.VideoStreamEvent
 */
export class VideoStreamEvent extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 stream_handle = 1;
         */
        this.streamHandle = protoInt64.zero;
        /**
         * @generated from oneof livekit.proto.VideoStreamEvent.message
         */
        this.message = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoStreamEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoStreamEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoStreamEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoStreamEvent, a, b);
    }
}
VideoStreamEvent.runtime = proto3;
VideoStreamEvent.typeName = "livekit.proto.VideoStreamEvent";
VideoStreamEvent.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "frame_received", kind: "message", T: VideoFrameReceived, oneof: "message" },
    { no: 3, name: "eos", kind: "message", T: VideoStreamEOS, oneof: "message" },
]);
/**
 * @generated from message livekit.proto.VideoFrameReceived
 */
export class VideoFrameReceived extends Message {
    constructor(data) {
        super();
        /**
         * In microseconds
         *
         * @generated from field: int64 timestamp_us = 2;
         */
        this.timestampUs = protoInt64.zero;
        /**
         * @generated from field: livekit.proto.VideoRotation rotation = 3;
         */
        this.rotation = VideoRotation.VIDEO_ROTATION_0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoFrameReceived().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoFrameReceived().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoFrameReceived().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoFrameReceived, a, b);
    }
}
VideoFrameReceived.runtime = proto3;
VideoFrameReceived.typeName = "livekit.proto.VideoFrameReceived";
VideoFrameReceived.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "buffer", kind: "message", T: OwnedVideoBuffer },
    { no: 2, name: "timestamp_us", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "rotation", kind: "enum", T: proto3.getEnumType(VideoRotation) },
]);
/**
 * @generated from message livekit.proto.VideoStreamEOS
 */
export class VideoStreamEOS extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoStreamEOS().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoStreamEOS().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoStreamEOS().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoStreamEOS, a, b);
    }
}
VideoStreamEOS.runtime = proto3;
VideoStreamEOS.typeName = "livekit.proto.VideoStreamEOS";
VideoStreamEOS.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message livekit.proto.VideoSourceResolution
 */
export class VideoSourceResolution extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 width = 1;
         */
        this.width = 0;
        /**
         * @generated from field: uint32 height = 2;
         */
        this.height = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoSourceResolution().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoSourceResolution().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoSourceResolution().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoSourceResolution, a, b);
    }
}
VideoSourceResolution.runtime = proto3;
VideoSourceResolution.typeName = "livekit.proto.VideoSourceResolution";
VideoSourceResolution.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message livekit.proto.VideoSourceInfo
 */
export class VideoSourceInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.VideoSourceType type = 1;
         */
        this.type = VideoSourceType.VIDEO_SOURCE_NATIVE;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VideoSourceInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VideoSourceInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VideoSourceInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VideoSourceInfo, a, b);
    }
}
VideoSourceInfo.runtime = proto3;
VideoSourceInfo.typeName = "livekit.proto.VideoSourceInfo";
VideoSourceInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(VideoSourceType) },
]);
/**
 * @generated from message livekit.proto.OwnedVideoSource
 */
export class OwnedVideoSource extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OwnedVideoSource().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OwnedVideoSource().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OwnedVideoSource().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OwnedVideoSource, a, b);
    }
}
OwnedVideoSource.runtime = proto3;
OwnedVideoSource.typeName = "livekit.proto.OwnedVideoSource";
OwnedVideoSource.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: VideoSourceInfo },
]);
//# sourceMappingURL=video_frame_pb.js.map