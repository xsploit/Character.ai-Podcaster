// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ConnectCallback, ConnectRequest, ConnectResponse, DisconnectCallback, DisconnectRequest, DisconnectResponse, GetSessionStatsCallback, GetSessionStatsRequest, GetSessionStatsResponse, PublishDataCallback, PublishDataRequest, PublishDataResponse, PublishSipDtmfCallback, PublishSipDtmfRequest, PublishSipDtmfResponse, PublishTrackCallback, PublishTrackRequest, PublishTrackResponse, PublishTranscriptionCallback, PublishTranscriptionRequest, PublishTranscriptionResponse, RoomEvent, SetLocalAttributesCallback, SetLocalAttributesRequest, SetLocalAttributesResponse, SetLocalMetadataCallback, SetLocalMetadataRequest, SetLocalMetadataResponse, SetLocalNameCallback, SetLocalNameRequest, SetLocalNameResponse, SetSubscribedRequest, SetSubscribedResponse, UnpublishTrackCallback, UnpublishTrackRequest, UnpublishTrackResponse } from "./room_pb.js";
import { CreateAudioTrackRequest, CreateAudioTrackResponse, CreateVideoTrackRequest, CreateVideoTrackResponse, GetStatsCallback, GetStatsRequest, GetStatsResponse, TrackEvent } from "./track_pb.js";
import { CaptureVideoFrameRequest, CaptureVideoFrameResponse, NewVideoSourceRequest, NewVideoSourceResponse, NewVideoStreamRequest, NewVideoStreamResponse, VideoConvertRequest, VideoConvertResponse, VideoStreamEvent } from "./video_frame_pb.js";
import { AudioStreamEvent, CaptureAudioFrameCallback, CaptureAudioFrameRequest, CaptureAudioFrameResponse, NewAudioResamplerRequest, NewAudioResamplerResponse, NewAudioSourceRequest, NewAudioSourceResponse, NewAudioStreamRequest, NewAudioStreamResponse, RemixAndResampleRequest, RemixAndResampleResponse } from "./audio_frame_pb.js";
import { E2eeRequest, E2eeResponse } from "./e2ee_pb.js";
/**
 * @generated from enum livekit.proto.LogLevel
 */
export var LogLevel;
(function (LogLevel) {
    /**
     * @generated from enum value: LOG_ERROR = 0;
     */
    LogLevel[LogLevel["LOG_ERROR"] = 0] = "LOG_ERROR";
    /**
     * @generated from enum value: LOG_WARN = 1;
     */
    LogLevel[LogLevel["LOG_WARN"] = 1] = "LOG_WARN";
    /**
     * @generated from enum value: LOG_INFO = 2;
     */
    LogLevel[LogLevel["LOG_INFO"] = 2] = "LOG_INFO";
    /**
     * @generated from enum value: LOG_DEBUG = 3;
     */
    LogLevel[LogLevel["LOG_DEBUG"] = 3] = "LOG_DEBUG";
    /**
     * @generated from enum value: LOG_TRACE = 4;
     */
    LogLevel[LogLevel["LOG_TRACE"] = 4] = "LOG_TRACE";
})(LogLevel || (LogLevel = {}));
// Retrieve enum metadata with: proto3.getEnumType(LogLevel)
proto3.util.setEnumType(LogLevel, "livekit.proto.LogLevel", [
    { no: 0, name: "LOG_ERROR" },
    { no: 1, name: "LOG_WARN" },
    { no: 2, name: "LOG_INFO" },
    { no: 3, name: "LOG_DEBUG" },
    { no: 4, name: "LOG_TRACE" },
]);
/**
 * This is the input of livekit_ffi_request function
 * We always expect a response (FFIResponse, even if it's empty)
 *
 * @generated from message livekit.proto.FfiRequest
 */
export class FfiRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof livekit.proto.FfiRequest.message
         */
        this.message = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FfiRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FfiRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FfiRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FfiRequest, a, b);
    }
}
FfiRequest.runtime = proto3;
FfiRequest.typeName = "livekit.proto.FfiRequest";
FfiRequest.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "dispose", kind: "message", T: DisposeRequest, oneof: "message" },
    { no: 3, name: "connect", kind: "message", T: ConnectRequest, oneof: "message" },
    { no: 4, name: "disconnect", kind: "message", T: DisconnectRequest, oneof: "message" },
    { no: 5, name: "publish_track", kind: "message", T: PublishTrackRequest, oneof: "message" },
    { no: 6, name: "unpublish_track", kind: "message", T: UnpublishTrackRequest, oneof: "message" },
    { no: 7, name: "publish_data", kind: "message", T: PublishDataRequest, oneof: "message" },
    { no: 8, name: "set_subscribed", kind: "message", T: SetSubscribedRequest, oneof: "message" },
    { no: 9, name: "set_local_metadata", kind: "message", T: SetLocalMetadataRequest, oneof: "message" },
    { no: 10, name: "set_local_name", kind: "message", T: SetLocalNameRequest, oneof: "message" },
    { no: 11, name: "set_local_attributes", kind: "message", T: SetLocalAttributesRequest, oneof: "message" },
    { no: 12, name: "get_session_stats", kind: "message", T: GetSessionStatsRequest, oneof: "message" },
    { no: 13, name: "publish_transcription", kind: "message", T: PublishTranscriptionRequest, oneof: "message" },
    { no: 14, name: "publish_sip_dtmf", kind: "message", T: PublishSipDtmfRequest, oneof: "message" },
    { no: 15, name: "create_video_track", kind: "message", T: CreateVideoTrackRequest, oneof: "message" },
    { no: 16, name: "create_audio_track", kind: "message", T: CreateAudioTrackRequest, oneof: "message" },
    { no: 17, name: "get_stats", kind: "message", T: GetStatsRequest, oneof: "message" },
    { no: 18, name: "new_video_stream", kind: "message", T: NewVideoStreamRequest, oneof: "message" },
    { no: 19, name: "new_video_source", kind: "message", T: NewVideoSourceRequest, oneof: "message" },
    { no: 20, name: "capture_video_frame", kind: "message", T: CaptureVideoFrameRequest, oneof: "message" },
    { no: 21, name: "video_convert", kind: "message", T: VideoConvertRequest, oneof: "message" },
    { no: 23, name: "new_audio_stream", kind: "message", T: NewAudioStreamRequest, oneof: "message" },
    { no: 24, name: "new_audio_source", kind: "message", T: NewAudioSourceRequest, oneof: "message" },
    { no: 25, name: "capture_audio_frame", kind: "message", T: CaptureAudioFrameRequest, oneof: "message" },
    { no: 26, name: "new_audio_resampler", kind: "message", T: NewAudioResamplerRequest, oneof: "message" },
    { no: 27, name: "remix_and_resample", kind: "message", T: RemixAndResampleRequest, oneof: "message" },
    { no: 28, name: "e2ee", kind: "message", T: E2eeRequest, oneof: "message" },
]);
/**
 * This is the output of livekit_ffi_request function.
 *
 * @generated from message livekit.proto.FfiResponse
 */
export class FfiResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof livekit.proto.FfiResponse.message
         */
        this.message = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FfiResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FfiResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FfiResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FfiResponse, a, b);
    }
}
FfiResponse.runtime = proto3;
FfiResponse.typeName = "livekit.proto.FfiResponse";
FfiResponse.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "dispose", kind: "message", T: DisposeResponse, oneof: "message" },
    { no: 3, name: "connect", kind: "message", T: ConnectResponse, oneof: "message" },
    { no: 4, name: "disconnect", kind: "message", T: DisconnectResponse, oneof: "message" },
    { no: 5, name: "publish_track", kind: "message", T: PublishTrackResponse, oneof: "message" },
    { no: 6, name: "unpublish_track", kind: "message", T: UnpublishTrackResponse, oneof: "message" },
    { no: 7, name: "publish_data", kind: "message", T: PublishDataResponse, oneof: "message" },
    { no: 8, name: "set_subscribed", kind: "message", T: SetSubscribedResponse, oneof: "message" },
    { no: 9, name: "set_local_metadata", kind: "message", T: SetLocalMetadataResponse, oneof: "message" },
    { no: 10, name: "set_local_name", kind: "message", T: SetLocalNameResponse, oneof: "message" },
    { no: 11, name: "set_local_attributes", kind: "message", T: SetLocalAttributesResponse, oneof: "message" },
    { no: 12, name: "get_session_stats", kind: "message", T: GetSessionStatsResponse, oneof: "message" },
    { no: 13, name: "publish_transcription", kind: "message", T: PublishTranscriptionResponse, oneof: "message" },
    { no: 14, name: "publish_sip_dtmf", kind: "message", T: PublishSipDtmfResponse, oneof: "message" },
    { no: 15, name: "create_video_track", kind: "message", T: CreateVideoTrackResponse, oneof: "message" },
    { no: 16, name: "create_audio_track", kind: "message", T: CreateAudioTrackResponse, oneof: "message" },
    { no: 17, name: "get_stats", kind: "message", T: GetStatsResponse, oneof: "message" },
    { no: 18, name: "new_video_stream", kind: "message", T: NewVideoStreamResponse, oneof: "message" },
    { no: 19, name: "new_video_source", kind: "message", T: NewVideoSourceResponse, oneof: "message" },
    { no: 20, name: "capture_video_frame", kind: "message", T: CaptureVideoFrameResponse, oneof: "message" },
    { no: 21, name: "video_convert", kind: "message", T: VideoConvertResponse, oneof: "message" },
    { no: 22, name: "new_audio_stream", kind: "message", T: NewAudioStreamResponse, oneof: "message" },
    { no: 23, name: "new_audio_source", kind: "message", T: NewAudioSourceResponse, oneof: "message" },
    { no: 24, name: "capture_audio_frame", kind: "message", T: CaptureAudioFrameResponse, oneof: "message" },
    { no: 25, name: "new_audio_resampler", kind: "message", T: NewAudioResamplerResponse, oneof: "message" },
    { no: 26, name: "remix_and_resample", kind: "message", T: RemixAndResampleResponse, oneof: "message" },
    { no: 27, name: "e2ee", kind: "message", T: E2eeResponse, oneof: "message" },
]);
/**
 * To minimize complexity, participant events are not included in the protocol.
 * It is easily deducible from the room events and it turned out that is is easier to implement
 * on the ffi client side.
 *
 * @generated from message livekit.proto.FfiEvent
 */
export class FfiEvent extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof livekit.proto.FfiEvent.message
         */
        this.message = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FfiEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FfiEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FfiEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FfiEvent, a, b);
    }
}
FfiEvent.runtime = proto3;
FfiEvent.typeName = "livekit.proto.FfiEvent";
FfiEvent.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "room_event", kind: "message", T: RoomEvent, oneof: "message" },
    { no: 2, name: "track_event", kind: "message", T: TrackEvent, oneof: "message" },
    { no: 3, name: "video_stream_event", kind: "message", T: VideoStreamEvent, oneof: "message" },
    { no: 4, name: "audio_stream_event", kind: "message", T: AudioStreamEvent, oneof: "message" },
    { no: 5, name: "connect", kind: "message", T: ConnectCallback, oneof: "message" },
    { no: 7, name: "disconnect", kind: "message", T: DisconnectCallback, oneof: "message" },
    { no: 8, name: "dispose", kind: "message", T: DisposeCallback, oneof: "message" },
    { no: 9, name: "publish_track", kind: "message", T: PublishTrackCallback, oneof: "message" },
    { no: 10, name: "unpublish_track", kind: "message", T: UnpublishTrackCallback, oneof: "message" },
    { no: 11, name: "publish_data", kind: "message", T: PublishDataCallback, oneof: "message" },
    { no: 12, name: "publish_transcription", kind: "message", T: PublishTranscriptionCallback, oneof: "message" },
    { no: 13, name: "capture_audio_frame", kind: "message", T: CaptureAudioFrameCallback, oneof: "message" },
    { no: 14, name: "set_local_metadata", kind: "message", T: SetLocalMetadataCallback, oneof: "message" },
    { no: 15, name: "set_local_name", kind: "message", T: SetLocalNameCallback, oneof: "message" },
    { no: 16, name: "set_local_attributes", kind: "message", T: SetLocalAttributesCallback, oneof: "message" },
    { no: 17, name: "get_stats", kind: "message", T: GetStatsCallback, oneof: "message" },
    { no: 18, name: "logs", kind: "message", T: LogBatch, oneof: "message" },
    { no: 19, name: "get_session_stats", kind: "message", T: GetSessionStatsCallback, oneof: "message" },
    { no: 20, name: "panic", kind: "message", T: Panic, oneof: "message" },
    { no: 21, name: "publish_sip_dtmf", kind: "message", T: PublishSipDtmfCallback, oneof: "message" },
]);
/**
 * Stop all rooms synchronously (Do we need async here?).
 * e.g: This is used for the Unity Editor after each assemblies reload.
 * TODO(theomonnom): Implement a debug mode where we can find all leaked handles?
 *
 * @generated from message livekit.proto.DisposeRequest
 */
export class DisposeRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool async = 1;
         */
        this.async = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DisposeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DisposeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DisposeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DisposeRequest, a, b);
    }
}
DisposeRequest.runtime = proto3;
DisposeRequest.typeName = "livekit.proto.DisposeRequest";
DisposeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message livekit.proto.DisposeResponse
 */
export class DisposeResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DisposeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DisposeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DisposeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DisposeResponse, a, b);
    }
}
DisposeResponse.runtime = proto3;
DisposeResponse.typeName = "livekit.proto.DisposeResponse";
DisposeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
/**
 * @generated from message livekit.proto.DisposeCallback
 */
export class DisposeCallback extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 async_id = 1;
         */
        this.asyncId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DisposeCallback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DisposeCallback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DisposeCallback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DisposeCallback, a, b);
    }
}
DisposeCallback.runtime = proto3;
DisposeCallback.typeName = "livekit.proto.DisposeCallback";
DisposeCallback.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message livekit.proto.LogRecord
 */
export class LogRecord extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: livekit.proto.LogLevel level = 1;
         */
        this.level = LogLevel.LOG_ERROR;
        /**
         * e.g "livekit", "libwebrtc", "tokio-tungstenite", etc...
         *
         * @generated from field: string target = 2;
         */
        this.target = "";
        /**
         * @generated from field: string message = 6;
         */
        this.message = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogRecord().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogRecord().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogRecord().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LogRecord, a, b);
    }
}
LogRecord.runtime = proto3;
LogRecord.typeName = "livekit.proto.LogRecord";
LogRecord.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(LogLevel) },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "module_path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "line", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message livekit.proto.LogBatch
 */
export class LogBatch extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated livekit.proto.LogRecord records = 1;
         */
        this.records = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogBatch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogBatch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogBatch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LogBatch, a, b);
    }
}
LogBatch.runtime = proto3;
LogBatch.typeName = "livekit.proto.LogBatch";
LogBatch.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: LogRecord, repeated: true },
]);
/**
 * @generated from message livekit.proto.Panic
 */
export class Panic extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Panic().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Panic().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Panic().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Panic, a, b);
    }
}
Panic.runtime = proto3;
Panic.typeName = "livekit.proto.Panic";
Panic.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=ffi_pb.js.map