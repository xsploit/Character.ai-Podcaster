import { FfiClient } from './ffi_client.js';
import { FfiHandle } from './napi/native.js';
import { AudioSourceType, CaptureAudioFrameRequest, NewAudioSourceRequest, } from './proto/audio_frame_pb.js';
export class AudioSource {
    constructor(sampleRate, numChannels, enableQueue) {
        this.sampleRate = sampleRate;
        this.numChannels = numChannels;
        const req = new NewAudioSourceRequest({
            type: AudioSourceType.AUDIO_SOURCE_NATIVE,
            sampleRate: sampleRate,
            numChannels: numChannels,
            enableQueue: enableQueue,
        });
        const res = FfiClient.instance.request({
            message: {
                case: 'newAudioSource',
                value: req,
            },
        });
        this.info = res.source.info;
        this.ffiHandle = new FfiHandle(res.source.handle.id);
    }
    async captureFrame(frame) {
        const req = new CaptureAudioFrameRequest({
            sourceHandle: this.ffiHandle.handle,
            buffer: frame.protoInfo(),
        });
        const res = FfiClient.instance.request({
            message: { case: 'captureAudioFrame', value: req },
        });
        const cb = await FfiClient.instance.waitFor((ev) => {
            return ev.message.case == 'captureAudioFrame' && ev.message.value.asyncId == res.asyncId;
        });
        if (cb.error) {
            throw new Error(cb.error);
        }
    }
}
//# sourceMappingURL=audio_source.js.map