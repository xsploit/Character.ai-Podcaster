import type TypedEmitter from 'typed-emitter';
import { FfiHandle } from './ffi_client.js';
import type { VideoRotation, VideoStreamInfo } from './proto/video_frame_pb.js';
import type { Track } from './track.js';
import { VideoFrame } from './video_frame.js';
export type VideoFrameEvent = {
    frame: VideoFrame;
    timestampUs: bigint;
    rotation: VideoRotation;
};
export type VideoStreamCallbacks = {
    frameReceived: (evt: VideoFrameEvent) => void;
};
export declare enum VideoStreamEvent {
    FrameReceived = "frameReceived"
}
declare const VideoStream_base: new () => TypedEmitter<VideoStreamCallbacks>;
export declare class VideoStream extends VideoStream_base {
    /** @internal */
    info: VideoStreamInfo;
    /** @internal */
    ffiHandle: FfiHandle;
    track: Track;
    constructor(track: Track);
    private onEvent;
    close(): void;
}
export {};
//# sourceMappingURL=video_stream.d.ts.map